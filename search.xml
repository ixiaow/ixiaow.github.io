<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PicGo搭建github图床</title>
      <link href="/posts/2513fba4/"/>
      <url>/posts/2513fba4/</url>
      
        <content type="html"><![CDATA[<h1 id="PicGo搭建github图床"><a href="#PicGo搭建github图床" class="headerlink" title="PicGo搭建github图床"></a>PicGo搭建github图床</h1><h4 id="1-下载PicGo并安装；"><a href="#1-下载PicGo并安装；" class="headerlink" title="1. 下载PicGo并安装；"></a>1. 下载<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo</a>并安装；</h4><h4 id="2-生成Githubtoken"><a href="#2-生成Githubtoken" class="headerlink" title="2. 生成Githubtoken"></a>2. 生成<a href="https://github.com/" target="_blank" rel="noopener">Github</a>token</h4><h5 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h5><ul><li><p>点击个人中心，选择<code>Settings</code>,打开个人设置页面；</p></li><li><p>在个人设置页面选择<code>Developer Settings</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ixiaow/cdn@latest/images/image-20200413170216901.png" alt="image-20200413170216901"></p><ul><li>进入<code>Developer settings</code>页后，点击<code>Personal access tokens</code>打开新的页面后,并点击右边的<code>Generate new token</code> 生成<code>token</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ixiaow/cdn@latest/images/image-20200413170324831.png" alt="image-20200413170324831"></p><ul><li>在生成<code>token</code>页面，勾选<code>repo</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ixiaow/cdn@latest/images/image-20200413170138935.png" alt="image-20200413170138935"> </p><h4 id="3-创建公共仓库，用来存放相关资源图片"><a href="#3-创建公共仓库，用来存放相关资源图片" class="headerlink" title="3. 创建公共仓库，用来存放相关资源图片"></a>3. 创建公共仓库，用来存放相关资源图片</h4><p>​    在github上创建一个仓库，用来存放一些资源    </p><p><img src="https://cdn.jsdelivr.net/gh/ixiaow/cdn@latest/images/image-20200413172848852.png" alt="image-20200413172848852"></p><h4 id="4-在PicGo中配置github图床相关信息"><a href="#4-在PicGo中配置github图床相关信息" class="headerlink" title="4. 在PicGo中配置github图床相关信息"></a>4. 在PicGo中配置github图床相关信息</h4><ul><li><p>打开PicGo 后，先安装一个插件<code>github-plus</code>，该插件是用来将图片上传到<code>gitee</code>或<code>github</code>上，比自带的<code>github</code>图床方便(自带的没有办法删除远程记录)</p></li><li><p>安装完成后，插件配置：</p><p><img src="https://cdn.jsdelivr.net/gh/ixiaow/cdn@latest/images/image-20200413173903356.png" alt="image-20200413173903356"></p></li></ul><p>  ① 处是需要存放图片的仓库，格式为 <code>github用户名/ 仓库名</code>;</p><p>  ② 处是存放图片路径的仓库下的分支，默认<code>master</code>分支；</p><p>  ③ token 为第二步骤上生成的<strong>github token</strong>；</p><p>  ④ 远程仓库存放图片的的路径，可自定义，可不填；</p><p>  ⑤ 自定义的图片路径，由于我使用了<code>jsDelivr</code>来实现github的<code>cdn缓存</code>，所以设置了此路径，如果不需要可不填；</p><p>  <strong>jsDelivr路径规则：</strong> <code>https://cdn.jsdelivr.net/gh/用户名/仓库名@版本号</code>，我这边版本号设置的是<code>latest</code>表示获取最新资源。</p><p>  ⑥ origin 表示 仓库可以是gitee或<code>github</code>,根据前面的步骤，此处只能是github；</p><p>  ⑦ 将其设置为默认图床</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><p>如果仓库需要设置自定义域名，需要将我们的资源提交到一个<code>gh-pages</code>分区</p></li><li><p>如果你的自定义域名配置dns区分了境外和国内，那么就需要注意，访问该仓库可能会出现404的情况</p><p>解决办法：</p><ul><li>创建一条新的cname解析，添加一个二级域名即可</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级语言特性</title>
      <link href="/posts/adf30ba7/"/>
      <url>/posts/adf30ba7/</url>
      
        <content type="html"><![CDATA[<h1 id="Java语言高级特性前言"><a href="#Java语言高级特性前言" class="headerlink" title="Java语言高级特性前言"></a>Java语言高级特性前言</h1><p>Java知识是作为Android开发的语言基础，虽然现在我们已经推出了kotlin，但是基于以下原因我们还是需要好好牢牢掌握java：</p><p>1）SDK还是改成java，kotlin也需要编译成为java运行；</p><p>2）目前大量的第三方库和继承与前任的代码都是java所写的；</p><p>3）Java语言应用不仅仅在Android，就是在后台开发中也是一个最流行的语言；</p><p>4）大公司面试都要求我们有扎实的Java语言基础。所以，请大家不要轻视提高自己Java基础的机会，请大家认真学习，做好笔记，争取取得更大的进步。</p><h1 id="Java中的泛型"><a href="#Java中的泛型" class="headerlink" title="Java中的泛型"></a>Java中的泛型</h1><h2 id="为什么我们需要泛型"><a href="#为什么我们需要泛型" class="headerlink" title="为什么我们需要泛型?"></a>为什么我们需要泛型?</h2><p>我们有如下两个场景：</p><ul><li><p>场景一：</p><p>实际开发中，经常有数值类型求和的需求，例如实现int类型的加法, 有时候还需要实现long类型的求和, 如果还需要double类型的求和，需要重新在重载一个输入是double类型的add方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">addFloat</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>场景二</p><p>定义了一个List类型的集合，先向其中加入了两个字符串类型的值，随后加入一个Integer类型的值。这是完全允许的，因为此时list默认的类型为Object类型。在之后的循环中，由于忘记了之前在list中也加入了Integer类型的值或其他编码原因，很容易出现错误。因为编译阶段正常，而运行时会出现 <code>ClassCastException</code> 异常。因此，导致此类错误编码过程中不易发现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonGeneric2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p><img src="/assets/image/%E6%B3%9B%E5%9E%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BA%8C%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF.png" alt="1570695958403"></p><p> 在如上的编码过程中，我们发现主要存在两个问题：</p><p>​      1. 当我们将一个对象放入集合中，集合不会记住此对象的类型，当再次从集合中取出此对象时，改对象的编译类型变成了Object类型，但其运行时类型任然为其本身类型。</p><ol start="2"><li>因此，//1处取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现<code>java.lang.ClassCastException</code>异常。</li></ol><p>所以泛型的好处就是：</p><ol><li><p>适用于多种数据类型执行相同的代码；</p></li><li><p>泛型中的类型在使用时指定，不需要强制类型转换。</p></li></ol><h2 id="泛型类和泛型接口"><a href="#泛型类和泛型接口" class="headerlink" title="泛型类和泛型接口"></a>泛型类和泛型接口</h2><p>泛型，即“<strong>参数化类型</strong>”，就是<em>将类型由原来的具体类型参数化</em>，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。</p><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p><p>引入一个类型变量 <code>T</code>（其他大写字母都可以，不过常用的就是<code>T，E，K，V</code>等），并且用<code>&lt;&gt;</code>括起来，并放在类名的后面。泛型类是允许有多个类型变量的。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单个泛型类型参数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalGeneric</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NormalGeneric</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 多个泛型类型参数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalGeneric2</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">private</span> K result<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NormalGeneric2</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> K k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>泛型接口与泛型类的定义基本相同。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> T <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而实现泛型接口的类，有两种实现方法：</p><ol><li>未传入泛型实参时:</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GeneratorImpl</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在new出类的实例时，需要指定具体类型：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Generator<span class="token operator">&lt;</span>String<span class="token operator">></span> generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratorImpl</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"impl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>传入泛型实参</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> String <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在new出类的实例时，和普通的类没区别。</p></li></ol><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorMethod</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 泛型方法</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">generatorMethod</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GeneratorMethod generatorMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratorMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>generatorMethod<span class="token punctuation">.</span><span class="token function">generatorMethod</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>generatorMethod<span class="token punctuation">.</span><span class="token function">generatorMethod</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>泛型方法，是在调用方法的时候指明泛型的具体类型 ，泛型方法可以在任何地方和任何场景中使用，包括普通类和泛型类。注意泛型类中定义的普通方法和泛型方法的区别。</p><p>普通方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Generic</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 此方法是普通方法，不是泛型方法</span>    <span class="token keyword">public</span> T <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>泛型方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">showKeyName</span><span class="token punctuation">(</span>Generic<span class="token operator">&lt;</span>T<span class="token operator">></span> generic<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"data: "</span> <span class="token operator">+</span> generic<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> generic<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="限定类型变量"><a href="#限定类型变量" class="headerlink" title="限定类型变量"></a>限定类型变量</h2><p>有时候，我们需要对类型变量加以约束，比如计算两个变量的最小，最大值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">min</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>请问，如果确保传入的两个变量一定有compareTo方法？那么解决这个问题的方案就是将T限制为实现了接口Comparable的类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">></span> T <span class="token function">min</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>T extends Comparable</code> 中</p><p>T 表示应该绑定类型的子类型，Comparable 表示绑定类型，子类型和绑定类型可以是类也可以是接口。</p><p>如果这个时候，我们试图传入一个没有实现接口Comparable的类的实例，将会发生编译错误。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">,</span> <span class="token string">"bbbb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下面是编译会报错</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GeneratorImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GeneratorImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同时<code>extends</code>左右都允许有多个，如<code>T,V extends Comparable &amp; Serializable</code></p><p><font color="red">注意限定类型中，只允许有一个类，而且如果有类，这个类必须是限定列表的第一个</font>。</p><p>这种类的限定既可以用在泛型方法上也可以用在泛型类上。</p><h2 id="泛型中的约束和局限性"><a href="#泛型中的约束和局限性" class="headerlink" title="泛型中的约束和局限性"></a>泛型中的约束和局限性</h2><p>现在我们有泛型类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Restrict</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span> </code></pre><h3 id="不能用基本类型实例化类型参数"><a href="#不能用基本类型实例化类型参数" class="headerlink" title="不能用基本类型实例化类型参数"></a>不能用基本类型实例化类型参数</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 编译报错</span>Restrict<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> restrict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Restrict</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="运行时类型检查只适用于原始类型"><a href="#运行时类型检查只适用于原始类型" class="headerlink" title="运行时类型检查只适用于原始类型"></a>运行时类型检查只适用于原始类型</h3><pre class=" language-java"><code class="language-java">Restrict<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> restrict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Restrict</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Restrict<span class="token operator">&lt;</span>String<span class="token operator">></span> stringRestrict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Restrict</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这种操作不被允许，编译时报错</span><span class="token comment" spellcheck="true">//if (restrict instanceof Restrict&lt;Boolean>) {}</span><span class="token comment" spellcheck="true">// 这种操作不被允许，编译时报错</span><span class="token comment" spellcheck="true">//if (restrict instanceof Restrict&lt;T>) {}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>restrict<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> stringRestrict<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>restrict<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="泛型类的静态上下文中类型变量失效"><a href="#泛型类的静态上下文中类型变量失效" class="headerlink" title="泛型类的静态上下文中类型变量失效"></a>泛型类的静态上下文中类型变量失效</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 静态域或方法里不能引用类型变量</span> <span class="token comment" spellcheck="true">// protected static T instance;</span></code></pre><p>不能在<code>静态域或方法</code>中引用<code>类型变量</code>。因为泛型是要在对象创建时才知道具体类型，而对象创建的代码执行先后顺序是static的部分，然后才是构造函数等。所以在对象初始化之前static的部分已经执行了，如果你在静态部分引用的泛型，那么毫无疑问虚拟机根本不知道是什么东西，因为这个时候类还没有初始化。</p><h3 id="不能创建参数化类型的数组"><a href="#不能创建参数化类型的数组" class="headerlink" title="不能创建参数化类型的数组"></a>不能创建参数化类型的数组</h3><pre class=" language-java"><code class="language-java">Restrict<span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> restricts<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以</span><span class="token comment" spellcheck="true">// Restrict&lt;Double>[] doubleRestricts = new Restrict&lt;Double>[10]; // 不允许</span></code></pre><h3 id="不能实例化类型变量"><a href="#不能实例化类型变量" class="headerlink" title="不能实例化类型变量"></a>不能实例化类型变量</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token function">Restrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不能实例化类型变量</span>    <span class="token comment" spellcheck="true">// this.data = new T();</span><span class="token punctuation">}</span></code></pre><h3 id="不能捕获泛型类的实例"><a href="#不能捕获泛型类的实例" class="headerlink" title="不能捕获泛型类的实例"></a>不能捕获泛型类的实例</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 泛型类不能继承Exception/Throwable</span><span class="token comment" spellcheck="true">// public class Problem&lt;T> extends Exception{}</span><span class="token comment" spellcheck="true">// 不能捕获泛型类对象</span><span class="token comment" spellcheck="true">// public &lt;T extends Throwable> void doWork(T t) {</span>    <span class="token comment" spellcheck="true">// try {</span>    <span class="token comment" spellcheck="true">// } catch (T e) {</span>    <span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// }</span></code></pre><p>但是这样可以：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">throws</span> T <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="泛型类型的继承规则"><a href="#泛型类型的继承规则" class="headerlink" title="泛型类型的继承规则"></a>泛型类型的继承规则</h2><p>现在我们有一个类、子类和泛型类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>那么<code>Pair&lt;Employee&gt;</code>和<code>Pair&lt;Worker&gt;</code>是没有任何关系的：</p><pre class=" language-java"><code class="language-java">Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 编译报错</span><span class="token comment" spellcheck="true">// Pair&lt;Employee> employeePair = new Pair&lt;Worker>();</span></code></pre><p>但是<code>泛型类</code>可以<code>继承或者扩展其他泛型类</code>，比如List和ArrayList</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendPair</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 允许</span>Pair<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employeePair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtendPair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="通配符类型"><a href="#通配符类型" class="headerlink" title="通配符类型"></a>通配符类型</h2><p>正是因为前面所述的，<code>Pair&lt;Employee&gt;</code>和<code>Pair&lt;Worker&gt;</code>没有任何关系，如果我们有一个泛型类和一个方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>GenericType<span class="token operator">&lt;</span>Fruit<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>现在我们有继承关系的类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orange</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HongFuShi</span> <span class="token keyword">extends</span> <span class="token class-name">Apple</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>则会产生这种情况：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    GenericType<span class="token operator">&lt;</span>Fruit<span class="token operator">></span> fruitGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>fruitGenericType<span class="token punctuation">)</span><span class="token punctuation">;</span>    GenericType<span class="token operator">&lt;</span>Orange<span class="token operator">></span> orangeGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// print(orangeGenericType); // 此处不被允许，编译报错</span><span class="token punctuation">}</span></code></pre><p>为解决这个问题，于是提出了一个<code>通配符类型 ?</code></p><p>有两种使用方式：</p><p><code>？ extends X</code> 表示类型的上界，类型参数是X的子类</p><p><code>？ super X</code> 表示类型的下界，类型参数是X的超类</p><p>这两种 方式从名字上来看，特别是super，很有迷惑性，下面我们来仔细辨析这两种方法。</p><h3 id="？-extends-X"><a href="#？-extends-X" class="headerlink" title="？ extends X"></a>？ extends X</h3><p>表示传递给方法的参数，必须是X的子类（包括X本身）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print2</span><span class="token punctuation">(</span>GenericType<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    GenericType<span class="token operator">&lt;</span>Fruit<span class="token operator">></span> fruitGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print2</span><span class="token punctuation">(</span>fruitGenericType<span class="token punctuation">)</span><span class="token punctuation">;</span>    GenericType<span class="token operator">&lt;</span>Orange<span class="token operator">></span> orangeGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print2</span><span class="token punctuation">(</span>orangeGenericType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>但是对泛型类GenericType来说，如果其中提供了get和set类型参数变量的方法的话，set方法是不允许被调用的，会出现编译错误</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> T <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GenericType<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token operator">></span> fruitGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Apple apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这样不被允许</span>        fruitGenericType<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这样是可以的</span>        Fruit fruit <span class="token operator">=</span> fruitGenericType<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>get方法则没问题，会返回一个Fruit类型的值。</p><p>这是因为<code>？ extends X</code>  表示类型的上界，类型参数是X的子类，那么可以肯定的说，get方法返回的一定是个X（不管是X或者X的子类）编译器是可以确定知道的。但是set方法只知道传入的是个X，至于具体是X的那个子类，不知道。</p><p>总结：主要用于安全地访问数据，可以访问X及其子类型，并且不能写入非null的数据。</p><h3 id="？-super-X"><a href="#？-super-X" class="headerlink" title="？ super X"></a>？ super X</h3><p>表示传递给方法的参数，必须是X的超类（包括X本身）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSuper</span><span class="token punctuation">(</span>GenericType<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Apple<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    GenericType<span class="token operator">&lt;</span>Fruit<span class="token operator">></span> fruitGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GenericType<span class="token operator">&lt;</span>Orange<span class="token operator">></span> orangeGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GenericType<span class="token operator">&lt;</span>Apple<span class="token operator">></span> appleGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GenericType<span class="token operator">&lt;</span>HongFuShi<span class="token operator">></span> shiGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printSuper</span><span class="token punctuation">(</span>fruitGenericType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printSuper</span><span class="token punctuation">(</span>appleGenericType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 编译出错</span>    <span class="token function">printSuper</span><span class="token punctuation">(</span>orangeGenericType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 编译出错</span>    <span class="token function">printSuper</span><span class="token punctuation">(</span>shiGenericType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是对泛型类GenericType来说，如果其中提供了get和set类型参数变量的方法的话，set方法可以被调用的，且能传入的参数只能是X或者X的子类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> T <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GenericType<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Apple<span class="token operator">></span> fruitGenericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fruitGenericType<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fruitGenericType<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HongFuShi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 此操作不被允许</span>        fruitGenericType<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 此操作不被允许</span>        fruitGenericType<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object object <span class="token operator">=</span> fruitGenericType<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>get方法只会返回一个Object类型的值。</p><p>这是因为，<code>？ super  X</code>  表示类型的下界，类型参数是X的超类（包括X本身），那么可以肯定的说，get方法返回的一定是个X的超类，那么到底是哪个超类？不知道，但是可以肯定的说，Object一定是它的超类，所以get方法返回Object。编译器是可以确定知道的。对于set方法来说，编译器不知道它需要的确切类型，但是X和X的子类可以安全的转型为X。</p><p>总结：主要用于安全地写入数据，可以写入X及其子类型。</p><h3 id="无限定的通配符"><a href="#无限定的通配符" class="headerlink" title="无限定的通配符 ?"></a>无限定的通配符 ?</h3><p>表示对类型没有什么限制，可以把<code>？</code>看成所有类型的父类，如<code>Pair&lt; ?&gt;</code>；</p><p>比如：</p><p><code>ArrayList&lt;T&gt; al=new ArrayList&lt;T&gt;();</code> 指定集合元素只能是T类型</p><p><code>ArrayList&lt;?&gt; al=new ArrayList&lt;?&gt;();</code>集合元素可以是任意类型，这种没有意义，一般是方法中，只是为了说明用法。</p><p>在使用上：</p><p><code>？ getFirst()</code> ： 返回值只能赋给 Object，；</p><p><code>void setFirst(?)</code> ： setFirst 方法不能被调用， 甚至不能用 Object 调用；</p><h2 id="虚拟机是如何实现泛型的？"><a href="#虚拟机是如何实现泛型的？" class="headerlink" title="虚拟机是如何实现泛型的？"></a>虚拟机是如何实现泛型的？</h2><p>泛型思想早在<code>C++</code>语言的<code>模板（Template）</code>中就开始生根发芽，在Java语言处于还没有出现泛型的版本时，只能通过Object是所有类型的父类和类型强制转换两个特点的配合来实现类型泛化。由于Java语言里面所有的类型都继承于<code>java.lang.Object</code>，所以Object转型成任何对象都是有可能的。但是也因为有无限的可能性，就只有程序员和运行期的虚拟机才知道这个Object到底是个什么类型的对象。在编译期间，编译器无法检查这个Object的强制转型是否成功，如果仅仅依赖程序员去保障这项操作的正确性，许多<code>ClassCastException</code>的风险就会转嫁到程序运行期之中。</p><p>泛型技术在<code>C#</code>和<code>Java</code>之中的使用方式看似相同，但实现上却有着根本性的分歧，C#里面泛型无论在程序源码中、编译后的IL中（Intermediate Language，中间语言，这时候泛型是一个占位符），或是运行期的CLR中，都是切实存在的，<code>List＜int＞</code>与<code>List＜String＞</code>就是两个不同的类型，它们在系统运行期生成，有自己的虚方法表和类型数据，这种实现称为类型膨胀，基于这种方法实现的泛型称为<code>真实泛型</code>。</p><p>Java语言中的泛型则不一样，它只在程序源码中存在，在编译后的字节码文件中，就已经替换为原来的原生类型（Raw Type，也称为裸类型）了，并且在相应的地方插入了强制转型代码，因此，对于运行期的Java语言来说，<code>ArrayList＜Integer＞</code>与<code>ArrayList＜String＞</code>就是同一个类，所以泛型技术实际上是Java语言的一颗语法糖，Java语言中的泛型实现方法称为<code>类型擦除</code>，基于这种方法实现的泛型称为<code>伪泛型</code>。</p><h2 id="通过反射获取泛型信息"><a href="#通过反射获取泛型信息" class="headerlink" title="通过反射获取泛型信息"></a>通过反射获取泛型信息</h2><p>由于Java泛型的引入，各种场景（虚拟机解析、反射等）下的方法调用都可能对原有的基础产生影响和新的需求，如在泛型类中如何获取传入的参数化类型等。因此，JCP组织对虚拟机规范做出了相应的修改，引入了诸如Signature、LocalVariableTypeTable等新的属性用于解决伴随泛型而来的参数类型的识别问题，Signature是其中最重要的一项属性，它的作用就是存储一个方法在字节码层面的特征签名[3]，这个属性中保存的参数类型并不是原生类型，而是包括了参数化类型的信息。修改后的虚拟机规范要求所有能识别49.0以上版本的Class文件的虚拟机都要能正确地识别Signature参数。</p><p>另外，从Signature属性的出现我们还可以得出结论，擦除法所谓的擦除，仅仅是对方法的Code属性中的字节码进行擦除，实际上元数据中还是保留了泛型信息，这也是我们能通过反射手段取得参数化类型的根本依据。</p><h1 id="反射原理及动态代理模式"><a href="#反射原理及动态代理模式" class="headerlink" title="反射原理及动态代理模式"></a>反射原理及动态代理模式</h1><h2 id="反射（Reflect）"><a href="#反射（Reflect）" class="headerlink" title="反射（Reflect）"></a>反射（Reflect）</h2><p>反射之中包含了一个<code>「反」</code>字，所以了解反射我们先从<code>「正」</code>开始。</p><p>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><p>反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用<code>new</code> 关键字来创建对象了。这时候，我们使用 JDK 提供的反射 API 进行反射调用。<strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p><p>Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的內部信息，并能直接操作任意对象的内部属性及方法。</p><p>Java反射机制主要提供了以下功能：</p><ul><li><p>在运行时构造任意一个类的对象</p></li><li><p>在运行时获取任意一个类所具有的成员变量和方法</p></li><li><p>在运行时调用任意一个对象的方法（属性）</p></li></ul><p>Java 是一门面向对象的语言。在面向对象的世界里，万事万物皆对象，既然万事万物皆对象，那么我们的类是不是对象呢？我们写的每一个类都可以看成一个对象，是<code>java.lang.Class</code> 类的对象。每一个类对应的Class放在哪里呢？当我们写完一个类的Java文件，编译成class文件的时候，编译器都会将这个类的对应的class对象放在class文件的末尾。里面都保存了些什么？大家可以理解保存了类的元数据信息，一个类的元数据信息包括什么？有哪些属性，方法，构造器，实现了哪些接口等等，那么这些信息在Java里都有对应的类来表示。</p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p><strong>Class是一个类，封装了当前对象所对应的类的信息</strong></p><p>一个类中有属性，方法，构造器等，比如说有一个Person类，一个Order类，一个Book类，这些都是不同的类，现在需要一个类，用来描述类，这就是Class，它应该有类名，属性，方法，构造器等。Class是用来描述类的类。</p><p>Class类是一个对象照镜子的结果，对象可以看到自己有哪些属性，方法，构造器，实现了哪些接口等等</p><p>对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个类的有关信息。 </p><p>对象只能由系统建立对象，一个类（而不是一个对象）在 JVM 中只会有一个Class实例</p><p>获取Class对象的三种方式</p><p>　　1.通过类名获取      类名.class    </p><p>　　2.通过对象获取      对象名.getClass()</p><p>　　3.通过全类名获取    Class.forName(全类名)</p><p>Class类的常用方法</p><table><thead><tr><th align="center">方法名</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">static Class&lt;?&gt; forName(String className)</td><td align="center">返回指定类名name的class</td></tr><tr><td align="center">public T newInstance()</td><td align="center">调用缺省构造函数，返回该class对象的一个实例</td></tr><tr><td align="center">public T newInstance(Object … initargs)</td><td align="center">返回当前格式构造函数，返回该Class对象的一个实例</td></tr><tr><td align="center">getName()</td><td align="center">返回此Class对象所标识的实体（类，接口，数组类，基本类型或void）名称</td></tr><tr><td align="center">Class getSuperClass()</td><td align="center">返回当前Class对象的父类的Class对象</td></tr><tr><td align="center">Class[] getInterfaces()</td><td align="center">获取当前Class对象的接口</td></tr><tr><td align="center">ClassLoader getClassLoader()</td><td align="center">返回该类的类加载器</td></tr></tbody></table><h3 id="代理模式和静态代理"><a href="#代理模式和静态代理" class="headerlink" title="代理模式和静态代理"></a>代理模式和静态代理</h3><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</p><p>目的：（1）通过引入代理对象的方式来间接访问目标对象，防止直接访问目标对象给系统带来的不必要复杂性； （2）通过代理对象对原有的业务增强；</p><p>代理模式一般会有三个角色：</p><p><img src="/assets/image/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%85%B3%E7%B3%BB.png" alt="img"> </p><p><strong>抽象角色</strong>：指代理角色和真实角色对外提供的公共方法，一般为一个接口</p><p><strong>真实角色</strong>：需要实现抽象角色接口，定义了真实角色所要实现的业务逻辑，以便供代理角色调用。也就是真正的业务逻辑在此。</p><p><strong>代理角色</strong>：需要实现抽象角色接口，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。将统一的流程控制都放到代理角色中处理！</p><p>而访问者不再访问真实角色，而是去访问代理角色。</p><p>静态代理在使用时,需要定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类。一般来说，被代理对象和代理对象是一对一的关系，当然一个代理对象对应多个被代理对象也是可以的。</p><p>静态代理，一对一则会出现时静态代理对象量多、代码量大，从而导致代码复杂，可维护性差的问题，一对多则代理对象会出现扩展能力差的问题。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a><strong>动态代理</strong></h3><p>是指在使用时再创建代理类和实例</p><p><strong>优点</strong></p><p>只需要1个动态代理类就可以解决创建多个静态代理的问题，避免重复、多余代码</p><p>更强的灵活性</p><p><strong>缺点</strong></p><p>效率低，相比静态代理中 直接调用目标对象方法，动态代理则需要先通过Java反射机制 从而 间接调用目标对象方法</p><p>应用场景局限，因为 Java 的单继承特性（每个代理类都继承了 Proxy 类），即只能针对接口 创建 代理类，不能针对类创建代理类。</p><p>在java的动态代理机制中，有两个重要的类或接口，一个是InvocationHandler接口、另一个则是 Proxy类，这个类和接口是实现我们动态代理所必须用到的。</p><p><code>InvocationHandler</code>接口是给动态代理类实现的，负责处理被代理对象的操作的，而<code>Proxy</code>是用来创建动态代理类实例对象的，因为只有得到了这个对象我们才能调用那些需要代理的方法。</p><p>动态代理用例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 真实对象</span>   HuaWeiFactory huaWeiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaWeiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据真实对象动态生成的代理对象</span>   PhoneFactory instance <span class="token operator">=</span> <span class="token punctuation">(</span>PhoneFactory<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>huaWeiFactory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         huaWeiFactory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"productPhone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截到方法了........."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>huaWeiFactory<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                     <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>huaWeiFactory<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    instance<span class="token punctuation">.</span><span class="token function">productPhone</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h4 id="动态代理实现原理"><a href="#动态代理实现原理" class="headerlink" title="动态代理实现原理"></a>动态代理实现原理</h4><p>观察Proxy.<em>newProxyInstance</em>方法，与创建对象有关的代码主要有：</p><p>获得代理类的class对象：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * Look up or generate the designated proxy class. */</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获得代理类的构造器：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">final</span> Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建代理类的实例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看来其中的关键点就是如何获得代理类的class对象，我们进入<strong><code>getProxyClass0</code></strong>方法，进而进入<strong><code>proxyClassCache.get</code></strong>方法，通过这个方法所在的类名，我们可以推测，JDK内部使用了某种机制缓存了我们的代理类的class对象，同时get方法接受的参数是被代理类的类加载器和类实现的的接口。</p><p>然后我们查看<code>proxyClassCache</code>的初始化的方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> WeakCache<span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span>        proxyClassCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakCache</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClassFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查看<code>ProxyClassFactory</code>类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * A factory function that generates, defines and returns the proxy class given * the ClassLoader and array of interfaces. */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ProxyClassFactory</span>    <span class="token keyword">implements</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span>    <span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">/*             * Choose a name for the proxy class to generate.             */</span>            <span class="token keyword">long</span> num <span class="token operator">=</span> nextUniqueNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 生成代理类名称</span>            String proxyName <span class="token operator">=</span> proxyPkg <span class="token operator">+</span> proxyClassNamePrefix <span class="token operator">+</span> num<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             * Generate the specified proxy class.             */</span>             <span class="token comment" spellcheck="true">// 生成代理类</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxyClassFile <span class="token operator">=</span> ProxyGenerator<span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>                proxyName<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">defineClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span>                                    proxyClassFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassFormatError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>而最终生成代理类的class对象是<em>defineClass0</em>方法，但是这个方法是个native方法，所以我们不去也无法深究它，但是通过这个方法的参数我们可以明显看到它接收了上面所生成的byte数组。</p><p>而我们通过ProxyUtils，这个自己写的工具类，将这个byte数组写入文件，我们并反编译，我们将会看到</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateClassFile</span><span class="token punctuation">(</span>Class <span class="token class-name">originClazz</span><span class="token punctuation">,</span> Class <span class="token class-name">clazz</span><span class="token punctuation">,</span> String proxyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxyClassFile <span class="token operator">=</span> ProxyGenerator<span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>        proxyName<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String path <span class="token operator">=</span> originClazz<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resource path: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> proxyName <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>proxyClassFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/assets/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%B4%BE%E7%94%9F%E7%B1%BB.jpg" alt="img"> </p><p>同时我们还会看到其中实现了业务接口的方法</p><p><img src="/assets/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%94%9F%E6%88%90%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%B3%95.jpg" alt="img"> </p><p><img src="/assets/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%BB%A3%E7%90%86%E7%94%9F%E6%88%90%E7%9A%84%E6%96%B9%E6%B3%95.jpg" alt="img"> </p><p>而h则来自派生类Proxy中</p><p><img src="/assets/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86InvokeHandler.jpg" alt="img"> </p><p>这个h的实例来自哪里？不就是我们在创建代理类的实例时传入的吗？</p><p><img src="/assets/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86InvokeHandler1.jpg" alt="img"> </p><h4 id="使用了动态代理的Retrofit"><a href="#使用了动态代理的Retrofit" class="headerlink" title="使用了动态代理的Retrofit"></a>使用了动态代理的<code>Retrofit</code></h4><p>Retrofit简单的说就是一个网络请求的适配器，它将一个基本的Java接口通过动态代理的方式翻译成一个HTTP请求，并通过OkHttp去发送请求。此外它还具有强大的可扩展性，支持各种格式转换以及RxJava。我们基于Retrofit2解析。</p><p>先定义一个名为X的java接口，当然里面有各种注解。</p><p>@FormUrlEncoded注解表示from表单，另外还有@Multipart等注解。@POST表示post请求，此外还可以使用@GET请求</p><p><img src="/assets/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86Retrofit%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.jpg" alt="img"> </p><p>然后如何使用的呢？</p><p>首先将域名传入构造一个Retrofit，然后通过retrofit中的create方法传入一个Java接口并得到一个x(当然x这个对象是经过处理了的)调用getPersonalListInfo(12)然后返回一个Call，最后这个Call调用了enqueue方法去异步请求http，这就是一个基本的Retrofit的网络请求。Retrofit2中Call接口的默认实现是OkHttpCall，它默认使用OkHttp3作为底层http请求client。</p><p><img src="/assets/image/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86Retrofit%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.jpg" alt="img"> </p><p>我们只定义了一个接口X，并没有实现这个接口，那么它是如何工作的呢？我们看看create方法的实现。</p><p>create()方法是个泛型方法，调用它时会返回一个范型T的对象，我们这里类型是X接口，在内部实现上，很明显了使用了动态代理返回了一个X的代理类。当调用X内部方法的时候，会调用invoke方法。invoke方法内则通过内部一系列的封装最后返回一个Call对象。</p><p><img src="/assets/image/Retrofit%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.jpg" alt="img"> </p><h1 id="多线程与Android线程性能优化"><a href="#多线程与Android线程性能优化" class="headerlink" title="多线程与Android线程性能优化"></a>多线程与Android线程性能优化</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="CPU核心数和线程数的关系"><a href="#CPU核心数和线程数的关系" class="headerlink" title="CPU核心数和线程数的关系"></a>CPU核心数和线程数的关系</h3><p>多核心: 也指单芯片多处理器( Chip Multiprocessors,简称CMP),CMP是由美国斯坦福大学提出的,其思想是将大规模并行处理器中的SMP(对称多处理器)集成到同一芯片内,各个处理器并行执行不同的进程。这种依靠多个CPU同时并行地运行程序是实现超高速计算的一个重要方向,称为并行处理</p><p>多线程: Simultaneous Multithreading.简称SMT.SMT可通过复制处理器上的结构状态,让同一个处理器上的多个线程同步执行并共享处理器的执行资源可最大限度地实现宽发射、乱序的超标量处理,提高处理器运算部件的利用率,缓和由于数据相关或 Cache未命中带来的访问内存延时。</p><p>核心数、线程数:目前主流CPU有双核、三核和四核,六核也在2010年发布。增加核心数目就是为了增加线程数,因为操作系统是通过线程来执行任务的,一般情况下它们是1:1对应关系,也就是说四核CPU一般拥有四个线程。但 Intel引入超线程技术后,使核心数与线程数形成1:2的关系</p><h3 id="CPU时间片轮转机制"><a href="#CPU时间片轮转机制" class="headerlink" title="CPU时间片轮转机制"></a>CPU时间片轮转机制</h3><p>我们平时在开发的时候，感觉并没有受cpu核心数的限制，想启动线程就启动线程，哪怕是在单核CPU上，为什么？这是因为操作系统提供了一种CPU时间片轮转机制。</p><p>时间片轮转调度是一种最古老、最简单、最公平且使用最广的算法,又称<code>RR</code>调度。每个进程被分配一个时间段,称作它的时间片,即该进程允许运行的时间。</p><p>百度百科对CPU时间片轮转机制原理解释如下:</p><blockquote><p>如果在时间片结束时进程还在运行,则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结来,则CPU当即进行切换。调度程序所要做的就是维护一张就绪进程列表,当进程用完它的时间片后,它被移到队列的末尾。</p></blockquote><p>时间片轮转调度中唯一有趣的一点是时间片的长度。<strong>从一个进程切换到另一个进程是需要定时间的,包括保存和装入寄存器值及内存映像,更新各种表格和队列等</strong>。假如进程切( processwitch),有时称为上下文切换( context switch),需要5ms,再假设时间片设为20ms,则在做完20ms有用的工作之后,CPU将花费5ms来进行进程切换。CPU时间的20%被浪费在了管理开销上了。</p><p>为了提高CPU效率,我们可以将时间片设为5000ms。这时浪费的时间只有0.1%。但考虑到在一个分时系统中,如果有10个交互用户几乎同时按下回车键,将发生什么情况?假设所有其他进程都用足它们的时间片的话,最后一个不幸的进程不得不等待5s才获得运行机会。多数用户无法忍受一条简短命令要5才能做出响应,同样的问题在一台支持多道程序的个人计算机上也会发</p><p>结论可以归结如下: <strong>时间片设得太短会导致过多的进程切换,降低了CPU效率:而设得太长又可能引起对短的交互请求的响应变差。将时间片设为100ms通常是一个比较合理的折衷</strong>。</p><p>在CPU死机的情况下,其实大家不难发现当运行一个程序的时候把CPU给弄到了100%再不重启电脑的情况下,其实我们还是有机会把它KⅢ掉的,我想也正是因为这种机制的缘故。</p><h3 id="什么是进程和线程"><a href="#什么是进程和线程" class="headerlink" title="什么是进程和线程"></a>什么是进程和线程</h3><p><strong>进程是程序运行资源分配的最小单位</strong></p><p><strong>进程是操作系统进行资源分配的最小单位</strong>, 其中资源包括:CPU、内存空间、磁盘10等, 同一进程中的多条线程共享该进程中的全部系统资源,而<strong>进程和进程之间是相互独立的</strong>。进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。</p><p>进程是程序在计算机上的一次执行活动。当你运行一个程序,你就启动了一个进程。显然,程序是死的、静态的,进程是活的、动态的。进程可以分为系统进程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程,它们就是处于运行状态下的操作系统本身,用户进程就是所有由你启动的进程。</p><p><strong>线程是CPU调度的最小单位,必须依赖于进程而存在</strong></p><p>线程是进程的一个实体,是<strong>CPU调度和分派的基本单位</strong>,它是比进程更小的、能独立运行的基本单位。线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p><p><strong>线程无处不在</strong></p><p>任何一个程序都必须要创建线程,特别是Java不管任何程序都必须启动一个main函数的主线程; Java Web开发里面的定时任务、定时器、JSP和 Servlet、异步消息处理机制,远程访问接口RM等,任何一个监听事件, onclick的触发事件等都离不开线程和并发的知识。</p><h3 id="澄清并行和并发"><a href="#澄清并行和并发" class="headerlink" title="澄清并行和并发"></a>澄清并行和并发</h3><p>我们举个例子,如果有条高速公路A上面并排有8条车道,那么最大的<strong>并行</strong>车辆就是8辆此条高速公路A同时并排行走的车辆小于等于8辆的时候,车辆就可以并行运行。CPU也是这个原理,一个CPU相当于一个高速公路A,核心数或者线程数就相当于并排可以通行的车道;而多个CPU就相当于并排有多条高速公路,而每个高速公路并排有多个车道。</p><p>当谈论<strong>并发</strong>的时候一定要加个单位时间,也就是说单位时间内并发量是多少?离开了单位时间其实是没有意义的。</p><p>俗话说,一心不能二用,这对计算机也一样,原则上一个CPU只能分配给一个进程,以便运行这个进程。我们通常使用的计算机中只有一个CPU,也就是说只有一颗心,要让它一心多用同时运行多个进程,就必须使用并发技术。实现并发技术相当复杂,最容易理解的是“时间片轮转进程调度算法”。</p><p>综合来说：</p><p><strong>并发</strong>: 指应用能够交替执行不同的任务,比如单CPU核心下执行多线程并非是同时执行多个任务,如果你开两个线程执行,就是在你几乎不可能察觉到的速度不断去切换这两个任务,已达到”同时执行效果”,其实并不是的,只是计算机的速度太快,我们无法察觉到而已.</p><p><strong>并行</strong>:指应用能够同时执行不同的任务,例:吃饭的时候可以边吃饭边打电话,这两件事情可以同时执行</p><p>两者区别:一个是交替执行,一个是同时执行.</p><h3 id="高并发编程的意义、好处和注意事项"><a href="#高并发编程的意义、好处和注意事项" class="headerlink" title="高并发编程的意义、好处和注意事项"></a>高并发编程的意义、好处和注意事项</h3><p>由于多核多线程的CPU的诞生,多线程、高并发的编程越来越受重视和关注。多线程可以给程序带来如下好处。</p><p>(1) 充分利用CPU的资源</p><p>从上面的CPU的介绍,可以看的出来,现在市面上没有CPU的内核不使用多线程并发机制的,特别是服务器还不止一个CPU。因为程序的基本调度单元是线程,并且一个线程也只能在一个CPU的一个核的一个线程跑,如果你是个i3的CPU的话,最差也是双核心4线程的运算能力:如果是一个线程的程序的话,那是要浪费3/4的CPU性能:如果设计一个多线程的程序的话,那它就可以同时在多个CPU的多个核的多个线程上跑,可以充分地利用CPU,减少CPU的空闲时间,发挥它的运算能力,提高并发量。</p><p>(2) 加快响应用户的时间</p><p>我们在做程序开发的时候, 特别是我们做互联网项目,网页的响应时间若提升1s,如果流量大的话,就能增加不少转换量。做过高性能web前端调优的都知道,要将静态资源地址用两三个子域名去加载,为什么?因为每多一个子域名,浏览器在加载你的页面的时候就会多开几个线程去加载你的页面资源,提升网站的响应速度。多线程,高并发真的是无处不在。</p><p>(3) 可以使你的代码模块化,异步化,简单化</p><p>例如我们在做 Android程序开发的时候,主线程的UI展示部分是一块主代码程序部分,但是UI上的按钮用相应事件的处理程序就可以做个单独的模块程序拿出来。这样既增加了异步的操,又使程序模块化,清晰化和简单化。</p><p>时下最流行的异步程序处理机制,正是多线程、并发程序最好的应用例子。</p><p>多线程应用开发的好处还有很多,大家在日后的代码编写过程中可以慢慢体会它的魅力。 </p><p><strong><em>多线程程序需要注意事项</em></strong></p><p>(1) 线程之间的安全性</p><p>从前面的章节中我们都知道,在同一个进程里面的多线程是资源共享的,也就是都可以访问同一个内存地址当中的一个变量。例如:若每个线程中对全局变量、静态变量只有读操作,而无写操作,一般来说,这个全局变量是线程安全的:若有多个线程同时执行写操作,一般都需要考虑线程同步,否则就可能影响线程安全。</p><p> (2) 线程之间的死循环过程</p><p>为了解决线程之间的安全性引入了Java的锁机制,而一不小心就会产生Java线程死锁的多线程问题,因为不同的线程都在等待那些根本不可能被释放的锁,从而导致所有的工作都无法完成。假设有两个线程,分别代表两个饥饿的人,他们必须共享刀叉并轮流吃饭。他们都需要获得两个锁:共享刀和共享叉的锁。</p><p>假如线程A获得了刀,而线程B获得了叉。线程A就会进入阻塞状态来等待获得叉,而线程B则阻塞来等待线程A所拥有的刀。这只是人为设计的例子,但尽管在运行时很难探测到,这类情况却时常发生</p><p>(3)  线程太多了会将服务器资源耗尽形成死机当机</p><p>线程数太多有可能造成系统创建大量线程而导致消耗完系统内存以及CPU的“过渡切换”,造成系统的死机,那么我们该如何解决这类问题呢?</p><p>某些系统资源是有限的, 如文件描述符。多线程程序可能耗尽资源,因为每个线程都可能希望有一个这样的资源。如果线程数相当大,或者某个资源的侯选线程数远远超过了可用的资源数则最好使用资源池。一个最好的示例是数据库连接池。只要线程需要使用一个数据库连接,它就从池中取出一个,使用以后再将它返回池中。资源池也称为资源库。</p><h2 id="认识Java里的线程"><a href="#认识Java里的线程" class="headerlink" title="认识Java里的线程"></a>认识Java里的线程</h2><h3 id="Java里的程序天生就是多线程的"><a href="#Java里的程序天生就是多线程的" class="headerlink" title="Java里的程序天生就是多线程的"></a><strong>Java里的程序天生就是多线程的</strong></h3><p>一个Java程序从main()方法开始执行，然后按照既定的代码逻辑执行，看似没有其他线程参与，但实际上Java程序天生就是多线程程序，因为执行main()方法的是一个名称为main的线程。</p><p>通过以下代码可以查看当前存在的线程：</p><pre class=" language-java"><code class="language-java">ThreadMXBean threadMXBean <span class="token operator">=</span> ManagementFactory<span class="token punctuation">.</span><span class="token function">getThreadMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ThreadInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> threadInfos <span class="token operator">=</span> threadMXBean<span class="token punctuation">.</span><span class="token function">dumpAllThreads</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ThreadInfo threadInfo <span class="token operator">:</span> threadInfos<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadInfo<span class="token punctuation">.</span><span class="token function">getThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>[6] Monitor Ctrl-Break //监控Ctrl-Break中断信号的</p><p>[5] Attach Listener //内存dump，线程dump，类信息统计，获取系统属性等</p><p>[4] Signal Dispatcher  // 分发处理发送给JVM信号的线程</p><p>[3] Finalizer  // 调用对象finalize方法的线程</p><p>[2] Reference Handler//清除Reference的线程</p><p>[1] main //main线程，用户程序入口</p><h3 id="线程的启动与中止"><a href="#线程的启动与中止" class="headerlink" title="线程的启动与中止"></a>线程的启动与中止</h3><h4 id="线程的启动"><a href="#线程的启动" class="headerlink" title="线程的启动"></a>线程的启动</h4><p>启动线程的方式有：</p><p>1、<code>X extends Thread</code>，然后 <code>X.run</code></p><p>2、<code>X implements  Runnable</code>， 然后交给 Thread运行</p><p>3、<code>X implements  Callable</code>，然后交给Thread运行</p><p>第1、2方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。从Java 1.5开始，就提供了<code>Callable</code>和<code>Future</code>，通过它们可以在任务执行完毕之后得到任务执行结果。 </p><h5 id="Callable、Future和FutureTask"><a href="#Callable、Future和FutureTask" class="headerlink" title="Callable、Future和FutureTask"></a>Callable、Future和FutureTask</h5><p>Runnable是一个接口，在它里面只声明了一个run()方法，由于run()方法返回值为void类型，所以在执行完任务之后无法返回任何结果。</p><p>Callable 位于<code>java.util.concurrent</code>包下，它也是一个接口，在它里面也只声明了一个方法，只不过这个方法叫做<code>call()</code>，这是一个泛型接口，call() 函数返回的类型就是传递进来的 V 类型。</p><p>Future 就是对于具体的 Runnable 或者 Callable 任务的执行结果进行取消、查询是否完成、获取结果。必要时可以通过get方法获取执行结果，该方法会阻塞直到任务返回结果。</p><p><img src="/assets/image/Future%E7%B1%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="1571883753111"></p><p>因为Future只是一个接口，所以是无法直接用来创建对象使用的，因此就有了下面的FutureTask。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>FutureTask</code> 类实现了<code>RunnableFuture</code>接口，RunnableFuture继承了<code>Runnable</code>接口和<code>Future</code>接口，而FutureTask实现了RunnableFuture接口。所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。</p><p>事实上，<strong>FutureTask是Future接口的一个唯一实现类</strong>。</p><p>要new一个FutureTask的实例，有两种方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">FutureTask</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callable <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callable <span class="token operator">=</span> callable<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> NEW<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// ensure visibility of callable</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">FutureTask</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">,</span> V result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callable <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">callable</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> NEW<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// ensure visibility of callable</span><span class="token punctuation">}</span></code></pre><h4 id="中止"><a href="#中止" class="headerlink" title="中止"></a><strong>中止</strong></h4><p><strong>线程自然终止</strong>：要么是run执行完成了，要么是抛出了一个未处理的异常导致线程提前结束。</p><p><strong>手动中止</strong></p><p>暂停、恢复和停止操作对应在线程Thread的API就是<code>suspend()</code>、<code>resume()</code>和<code>stop()</code>。<strong><em>但是这些API是过期的</em></strong>，也就是不建议使用的。不建议使用的原因主要有：以suspend()方法为例，<strong>在调用后，线程不会释放已经占有的资源（比如锁），而是占有着资源进入睡眠状态，这样容易引发死锁问题</strong>。同样，stop()方法在终结一个线程时不会保证线程的资源正常释放，通常是没有给予线程完成资源释放工作的机会，因此会导致程序可能工作在不确定状态下。正因为suspend()、resume()和stop()方法带来的副作用，这些方法才被标注为不建议使用的过期方法。</p><p>安全的中止则是其他线程通过调用某个线程A的<strong>interrupt()</strong>方法对其进行中断操作, 中断好比其他线程对该线程打了个招呼，“A，你要中断了”，不代表线程A会立即停止自己的工作，同样的A线程完全可以不理会这种中断请求。<strong>因为java里的线程是协作式的，不是抢占式的</strong>。线程通过检查自身的中断标志位是否被置为true来进行响应，线程通过方法<strong>isInterrupted()</strong>来进行判断是否被中断，也可以调用静态方法<strong>Thread.interrupted()</strong>来进行判断当前线程是否被中断，不过Thread.interrupted()会同时将中断标识位改写为false。</p><p>如果一个线程处于了阻塞状态（如线程调用了thread.sleep、thread.join、thread.wait），则在线程在检查中断标示时如果发现中断标示为true，则会在这些阻塞方法调用处抛出InterruptedException异常，并且在抛出异常后会立即将线程的中断标示位清除，即重新设置为false。</p><p><strong>不建议自定义一个取消标志位来中止线程的运行</strong>。因为run方法里有阻塞调用时会无法很快检测到取消标志，线程必须从阻塞调用返回后，才会检查这个取消标志。这种情况下，使用中断会更好，因为，一、一般的阻塞方法，如sleep等本身就支持中断的检查，二、检查中断位的状态和检查取消标志位没什么区别，用中断位的状态还可以避免声明取消标志位，减少资源的消耗。</p><p><strong>注意：处于死锁状态的线程无法被中断</strong></p><h2 id="对Java里的线程再多一点点认识"><a href="#对Java里的线程再多一点点认识" class="headerlink" title="对Java里的线程再多一点点认识"></a>对Java里的线程再多一点点认识</h2><h3 id="深入理解run-和start"><a href="#深入理解run-和start" class="headerlink" title="深入理解run()和start()"></a>深入理解run()和start()</h3><p>Thread 类是Java里对线程概念的抽象，可以这样理解：我们通过<code>new Thread()</code>其实只是new出一个<code>Thread的实例</code>，还没有操作系统中真正的线程挂起钩来。只有执行了start()方法后，才实现了真正意义上的启动线程。</p><p><code>start()</code>方法让一个线程进入<strong>就绪队列等待分配cpu</strong>，分到cpu后才调用实现的run()方法，start()方法不能重复调用。</p><p>而run方法是业务逻辑实现的地方，本质上和任意一个类的任意一个成员方法并没有任何区别，可以重复执行，可以被单独调用。</p><h3 id="其他的线程方法"><a href="#其他的线程方法" class="headerlink" title="其他的线程方法"></a>其他的线程方法</h3><p><code>yield()</code>方法：使当前线程让出CPU占有权，但让出的时间是不可设定的。也不会释放锁资源，所有执行yield()的线程有可能在进入到可执行状态后马上又被执行。</p><p><code>join</code>方法：把指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程。比如在线程B中调用了线程A的Join()方法，直到线程A执行完毕后，才会继续执行线程B。</p><p><code>wait()/notify()/notifyAll()</code>：后面会单独讲述</p><h2 id="线程间的共享和协作"><a href="#线程间的共享和协作" class="headerlink" title="线程间的共享和协作"></a>线程间的共享和协作</h2><h3 id="线程间的共享"><a href="#线程间的共享" class="headerlink" title="线程间的共享"></a>线程间的共享</h3><p>线程开始运行，拥有自己的<code>栈空间</code>，就如同一个脚本一样，按照既定的代码一步一步地执行，直到终止。但是，每个运行中的线程，如果仅仅是孤立地运行，那么没有一点儿价值，或者说价值很少，如果多个线程能够相互配合完成工作，包括数据之间的共享，协同处理事情。这将会带来巨大的价值。</p><p>Java支持多个线程同时访问一个对象或者对象的成员变量，关键字<code>synchronized</code>可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和排他性，又称为内置锁机制。</p><p><strong>对象锁和类锁：</strong></p><p>对象锁是用于对象实例方法，或者一个对象实例上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的对象实例可以有很多个，但是每个类只有一个class对象，所以不同对象实例的对象锁是互不干扰的，但是每个类只有一个类锁。</p><p>但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，类锁其实锁的是每个类的对应的class对象。类锁和对象锁之间也是互不干扰的。</p><h3 id="线程间的协作"><a href="#线程间的协作" class="headerlink" title="线程间的协作"></a><strong>线程间的协作</strong></h3><p>线程之间相互配合，完成某项工作，比如：一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作，整个过程开始于一个线程，而最终执行又是另一个线程。前者是生产者，后者就是消费者，这种模式隔离了“做什么”（what）和“怎么做”（How），简单的办法是让消费者线程不断地循环检查变量是否符合预期在while循环中设置不满足的条件，如果条件满足则退出while循环，从而完成消费者的工作。却存在如下问题：</p><p>1）难以确保及时性。</p><p>2）难以降低开销。如果降低睡眠的时间，比如休眠1毫秒，这样消费者能更加迅速地发现条件变化，但是却可能消耗更多的处理器资源，造成了无端的浪费。</p><h4 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h4><p>是指一个线程A调用了对象O的<code>wait()</code>方法进入等待状态，而另一个线程B调用了对象O的<code>notify()</code>或者<code>notifyAll()</code>方法，线程A收到通知后从对象O的wait()方法返回，进而执行后续操作。上述两个线程通过对象O来完成交互，而对象上的wait()和notify/notifyAll()的关系就如同开关信号一样，用来完成等待方和通知方之间的交互工作。</p><p><code>notify()</code>：</p><p>通知一个在对象上等待的线程,使其从<code>wait</code>方法返回,而返回的前提是该线程获取到了<code>对象的锁</code>，没有获得锁的线程重新进入<code>WAITING</code>状态。</p><p><code>notifyAll()</code>：</p><p>通知所有等待在该对象上的线程</p><p><code>wait()</code>:</p><p>调用该方法的线程进入<code>WAITING</code>状态,只有等待另外线程的<code>通知</code>或<code>被中断</code>才会返回.需要注意,调用wait()方法后,<strong>会释放对象的锁</strong></p><p><code>wait(long)</code>:</p><p>超时等待一段时间, 这里的参数时间是毫秒, 也就是等待长达n毫秒, 如果没有通知就超时返回</p><p><code>wait (long,int)</code>:</p><p>对于超时时间更细粒度的控制,可以达到纳秒</p><h5 id="等待和通知的标准范式"><a href="#等待和通知的标准范式" class="headerlink" title="等待和通知的标准范式"></a>等待和通知的标准范式</h5><p><strong>等待方</strong>遵循如下原则。</p><p>1）获取对象的锁。</p><p>2）如果条件不满足，那么调用对象的wait()方法，被通知后仍要检查条件。</p><p>3）条件满足则执行对应的逻辑。</p><pre class=" language-java"><code class="language-java"><span class="token function">syncronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 不能是Class对象</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>条件不满足<span class="token punctuation">)</span><span class="token punctuation">{</span>        对象<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    对应的逻辑处理<span class="token punctuation">}</span></code></pre><p><strong>通知方</strong>遵循如下原则。</p><p>1）获得对象的锁。</p><p>2）改变条件。</p><p>3）通知所有等待在对象上的线程。</p><pre class=" language-java"><code class="language-java"><span class="token function">syncronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不能是Class对象</span>    改变条件    对象<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在调用<code>wait()</code> 之前，线程必须要获得该对象的对象级别锁，即只能在同步方法或同步块中调用wait（）方法，进入wait（）方法后，当前线程释放锁，在从wait（）返回前，线程与其他线程竞争重新获得锁，notifyAll方法一旦该对象锁被释放（notifyAll线程退出调用了notifyAll的synchronized代码块的时候），他们就会去竞争。如果其中一个线程获得了该对象锁，它就会继续往下执行，在它退出synchronized代码块，释放锁后，其他的已经被唤醒的线程将会继续竞争获取该锁，一直进行下去，直到所有被唤醒的线程都执行完毕。</p><h5 id="notify和notifyAll应该用谁"><a href="#notify和notifyAll应该用谁" class="headerlink" title="notify和notifyAll应该用谁"></a>notify和notifyAll应该用谁</h5><p>尽可能用notifyall()，谨慎使用notify()。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Express</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> km<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*快递运输里程数*/</span>    <span class="token keyword">public</span> <span class="token function">Express</span><span class="token punctuation">(</span><span class="token keyword">int</span> km<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>km <span class="token operator">=</span> km<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 变化公里数，然后通知处于wait状态并需要处理公里数的线程进行业务处理*/</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">changeKm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>km <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">waitKm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>km<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"check km thread["</span>                        <span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"] is be notifyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the km is"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>km<span class="token operator">+</span><span class="token string">",I will change db."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCond</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ExpressCond express <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpressCond</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*检查里程数变化的线程,不满足条件，线程一直等待*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CheckKm</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            express<span class="token punctuation">.</span><span class="token function">waitKm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">CheckKm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        express<span class="token punctuation">.</span><span class="token function">changeKm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//快递里程变化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal，即<code>线程变量</code>，是一个以ThreadLocal对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个线程上的一个值, ThreadLocal往往用来实现变量在线程之间的隔离。</p><p>ThreadLocal类接口很简单，只有4个方法，我们先来了解一下：</p><p>•  void set(Object value) </p><p>设置当前线程的线程局部变量的值。</p><p>•  public Object get() </p><p>该方法返回当前线程所对应的线程局部变量。</p><p>•  public void remove() </p><p>将当前线程局部变量的值删除，目的是为了减少内存的占用，该方法是JDK 5.0新增的方法。需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收，所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。</p><p>•  protected Object initialValue() </p><p>返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的。这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次。ThreadLocal中的缺省实现直接返回一个null。</p><p>public final static ThreadLocal<string> RESOURCE = new ThreadLocal<string>();RESOURCE代表一个能够存放String类型的ThreadLocal对象。此时不论什么一个线程能够并发访问这个变量，对它进行写入、读取操作，都是线程安全的。</string></string></p><h2 id="显式锁"><a href="#显式锁" class="headerlink" title="显式锁"></a>显式锁</h2><h3 id="Lock接口和synchronized的比较"><a href="#Lock接口和synchronized的比较" class="headerlink" title="Lock接口和synchronized的比较"></a>Lock接口和synchronized的比较</h3><p>我们一般的Java程序是靠<code>synchronized</code>关键字实现锁功能的，使用synchronized关键字将会<code>隐式</code>地获取锁，但是它将锁的获取和释放固化了，也就是先获取再释放。synchronized属于Java语言层面的锁，也被称之为<code>内置锁</code>。</p><p>synchronized这种机制，一旦开始获取锁，是不能中断的，也不提供尝试获取锁的机制。</p><p>而<code>Lock</code>是由Java在语法层面提供的，<strong>锁的获取和释放需要我们明显的去获取</strong>，因此被称为<code>显式锁</code>。并且提供了synchronized不提供的机制。</p><p><img src="/assets/image/synchronized%E5%92%8Clock.png" alt="image-20191028113836945"></p><h3 id="Lock接口和核心方法"><a href="#Lock接口和核心方法" class="headerlink" title="Lock接口和核心方法"></a>Lock接口和核心方法</h3><p>在<code>finally</code>块中释放锁，目的是保证在获取到锁之后，最终能够被释放。</p><pre class=" language-java"><code class="language-java">lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO doSomething</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><img src="/assets/image/lock.png" alt="image-20191028114310187"><h3 id="可重入锁ReentrantLock、所谓锁的公平和非公平"><a href="#可重入锁ReentrantLock、所谓锁的公平和非公平" class="headerlink" title="可重入锁ReentrantLock、所谓锁的公平和非公平"></a>可重入锁ReentrantLock、所谓锁的公平和非公平</h3><p><code>synchronized</code>关键字隐式的支持重进入，比如一个synchronized修饰的递归方法，在方法执行时，执行线程在获取了锁之后仍能连续多次地获得该锁。<code>ReentrantLock</code>在调用<code>lock()</code>方法时，已经获取到锁的线程，能够再次调用lock()方法获取锁而不被阻塞。</p><p>*<em>公平和非公平锁 *</em></p><p>如果在时间上，先对锁进行获取的请求一定先被满足，那么这个锁是公平的，反之，是不公平的。公平的获取锁，也就是等待时间最长的线程最优先获取锁，也可以说锁获取是顺序的。</p><p>ReentrantLock提供了一个构造函数，能够控制锁是否是公平的。事实上，<strong>公平的锁机制往往没有非公平的效率高</strong>。原因是，<strong>在恢复一个被挂起的线程与该线程真正开始运行之间存在着严重的延迟</strong>。假设线程A持有一个锁, 并且线程B请求这个锁。由于这个锁已被线程A持有,因此B将被挂起。当A释放锁时,B将被唤醒,因此会再次尝试获取锁。与此同时,如果C也请求这个锁,那么C很可能会在B被完全唤醒之前获得、使用以及释放这个锁。这样的情况是一种“双赢”的局面:B获得锁的时刻并没有推迟,C更早地获得了锁,并且吞吐量也获得了提高。</p><h3 id="读写锁ReentrantReadWriteLock"><a href="#读写锁ReentrantReadWriteLock" class="headerlink" title="读写锁ReentrantReadWriteLock"></a>读写锁ReentrantReadWriteLock</h3><p>之前提到锁（synchronized和ReentrantLock）基本都是<code>排他锁</code>，这些锁在同一时刻只允许一个线程进行访问，而读写锁在同一时刻可以允许多个读线程访问，但是在写线程访问时，所有的读线程和其他写线程均被阻塞。读写锁维护了一对锁，一个读锁和一个写锁，通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大提升。</p><p>除了保证写操作对读操作的可见性以及并发性的提升之外，读写锁能够简化读写交互场景的编程方式。假设在程序中定义一个共享的用作缓存数据结构，它大部分时间提供读服务（例如查询和搜索），而写操作占有的时间很少，但是写操作完成之后的更新需要对后续的读服务可见。</p><p>一般情况下，读写锁的性能都会比排它锁好，因为大多数场景读是多于写的。在读多于写的情况下，读写锁能够提供比排它锁更好的并发性和吞吐量</p><h3 id="Condition接口"><a href="#Condition接口" class="headerlink" title="Condition接口"></a>Condition接口</h3><p>任意一个Java对象，都拥有一组监视器方法（定义在java.lang.Object上），主要包括wait()、wait(long timeout)、notify()以及notifyAll()方法，这些方法与synchronized同步关键字配合，可以实现等待/通知模式。Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式。</p><p>用Lock和Condition实现等待通知</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">conditionWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">conditionSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h1 id="线程池原理与AsyncTask"><a href="#线程池原理与AsyncTask" class="headerlink" title="线程池原理与AsyncTask"></a>线程池原理与AsyncTask</h1><h2 id="什么是线程池？为什么要用线程池"><a href="#什么是线程池？为什么要用线程池" class="headerlink" title="什么是线程池？为什么要用线程池?"></a>什么是线程池？为什么要用线程池?</h2><p>Java中的线程池是运用场景最多的并发框架，几乎所有需要异步或并发执行任务的程序都可以使用线程池。线程池就是将线程进行池化，需要运行任务时从池中拿一个线程来执行，执行完毕，线程放回池中。</p><p>在开发过程中，合理地使用线程池能够带来3个好处。</p><p>第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p><p>第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。   如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有T1，T3的开销了。</p><p>第三：提高线程的可管理性。线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</p><h2 id="JDK中的线程池和工作机制"><a href="#JDK中的线程池和工作机制" class="headerlink" title="JDK中的线程池和工作机制"></a><strong>JDK中的线程池和工作机制</strong></h2><h3 id="线程池的创建各个参数含义"><a href="#线程池的创建各个参数含义" class="headerlink" title="线程池的创建各个参数含义"></a>线程池的创建各个参数含义</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span><span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>TimeUnit unit<span class="token punctuation">,</span>BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>ThreadFactory threadFactory<span class="token punctuation">,</span>RejectedExecutionHandler handler<span class="token punctuation">)</span></code></pre><h4 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h4><p>线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize；</p><p>如果当前线程数为corePoolSize，继续提交的任务被保存到阻塞队列中，等待被执行；</p><p>如果执行了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有核心线程。</p><h4 id="maximumPoolSize"><a href="#maximumPoolSize" class="headerlink" title="maximumPoolSize"></a>maximumPoolSize</h4><p>线程池中允许的最大线程数。如果当前阻塞队列满了，且继续提交任务，则创建新的线程执行任务，前提是当前线程数小于maximumPoolSize</p><h4 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h4><p>线程空闲时的存活时间，即当线程没有任务执行时，继续存活的时间。默认情况下，该参数只在线程数大于corePoolSize时才有用</p><h4 id="TimeUnit"><a href="#TimeUnit" class="headerlink" title="TimeUnit"></a>TimeUnit</h4><p>keepAliveTime的时间单位</p><h4 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h4><p>workQueue必须是BlockingQueue阻塞队列。当线程池中的线程数超过它的corePoolSize的时候，线程会进入阻塞队列进行阻塞等待。通过workQueue，线程池实现了阻塞功能</p><h5 id="什么是阻塞队列"><a href="#什么是阻塞队列" class="headerlink" title="什么是阻塞队列"></a>什么是阻塞队列</h5><p><strong>队列：</strong></p><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><p>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。</p><p><strong>阻塞队列：</strong></p><p>1）支持阻塞的插入方法：意思是当队列满时，队列会阻塞插入元素的线程，直到队列不满。</p><p>2）支持阻塞的移除方法：意思是在队列为空时，获取元素的线程会等待队列变为非空。</p><p>阻塞队列常用于生产者和消费者的场景，生产者是向队列里添加元素的线程，消费者是从队列里取元素的线程。阻塞队列就是生产者用来存放元素、消费者用来获取元素的容器。</p><p><img src="/assets/image/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97.png" alt="image-20191028134334746"></p><ul><li><p>抛出异常：当队列满时，如果再往队列里插入元素，会抛出<code>IllegalStateException（"Queuefull"）</code>异常。当队列为空时，从队列里获取元素会抛出<code>NoSuchElementException</code>异常。</p></li><li><p>返回特殊值：当往队列插入元素时，会返回元素是否插入成功，成功返回true。如果是移除方法，则是从队列里取出一个元素，如果没有则返回null。</p></li><li><p>一直阻塞：当阻塞队列满时，如果生产者线程往队列里put元素，队列会一直阻塞生产者线程，直到队列可用或者响应中断退出。当队列空时，如果消费者线程从队列里take元素，队列会阻塞住消费者线程，直到队列不为空。</p></li><li><p>超时退出：当阻塞队列满时，如果生产者线程往队列里插入元素，队列会阻塞生产者线程一段时间，如果超过了指定的时间，生产者线程就会退出。</p></li></ul><h5 id="常用阻塞队列"><a href="#常用阻塞队列" class="headerlink" title="常用阻塞队列"></a>常用阻塞队列</h5><ul><li><p>ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列。</p></li><li><p>LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列。</p></li><li><p>PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列。</p></li><li><p>DelayQueue：一个使用优先级队列实现的无界阻塞队列。</p></li><li><p>SynchronousQueue：一个不存储元素的阻塞队列。</p></li><li><p>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。</p></li><li><p>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。</p></li></ul><h4 id="threadFactory"><a href="#threadFactory" class="headerlink" title="threadFactory"></a>threadFactory</h4><p>创建线程的工厂，通过自定义的线程工厂可以给每个新建的线程设置一个具有识别度的线程名Executors静态工厂里默认的threadFactory，线程的命名规则是“<strong>pool-数字-thread-数字</strong>”</p><h4 id="RejectedExecutionHandler（饱和策略）"><a href="#RejectedExecutionHandler（饱和策略）" class="headerlink" title="RejectedExecutionHandler（饱和策略）"></a>RejectedExecutionHandler（饱和策略）</h4><p>线程池的饱和策略，当阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，必须采取一种策略处理该任务，线程池提供了4种策略：</p><p>（1）AbortPolicy：直接抛出异常，默认策略；</p><p>（2）CallerRunsPolicy：用调用者所在的线程来执行任务；</p><p>（3）DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</p><p>（4）DiscardPolicy：直接丢弃任务；</p><p>当然也可以根据应用场景实现<code>RejectedExecutionHandler</code>接口，自定义饱和策略，如记录日志或持久化存储不能处理的任务。</p><h3 id="线程池的工作机制"><a href="#线程池的工作机制" class="headerlink" title="线程池的工作机制"></a>线程池的工作机制</h3><p>1）如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）。</p><p>2）如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。</p><p>3）如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务（注意，执行这一步骤需要获取全局锁）。</p><p>4）如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectedExecution()方法。</p><h2 id="合理配置线程池"><a href="#合理配置线程池" class="headerlink" title="合理配置线程池"></a>合理配置线程池</h2><p>要想合理地配置线程池，就必须首先分析任务特性</p><p>要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析。</p><ul><li><p>任务的性质：CPU密集型任务、IO密集型任务和混合型任务。</p></li><li><p>任务的优先级：高、中和低。</p></li><li><p>任务的执行时间：长、中和短。</p></li><li><p>任务的依赖性：是否依赖其他系统资源，如数据库连接。</p></li></ul><p>性质不同的任务可以用不同规模的线程池分开处理。CPU密集型任务应配置尽可能小的线程，如配置Ncpu+1个线程的线程池。由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如2*Ncpu。混合型的任务，如果可以拆分，将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。如果这两个任务执行时间相差太大，则没必要进行分解。可以通过<code>Runtime.getRuntime().availableProcessors()</code>方法获得当前设备的CPU个数。</p><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a><strong>AsyncTask</strong></h2><h3 id="为什么需要AsyncTask？"><a href="#为什么需要AsyncTask？" class="headerlink" title="为什么需要AsyncTask？"></a>为什么需要AsyncTask？</h3><p>在Android当中，当一个应用程序的组件启动的时候，并且没有其他的应用程序组件在运行时，Android系统就会为该应用程序组件开辟一个新的线程来执行。默认的情况下，在一个相同Android应用程序当中，其里面的组件都是运行在同一个线程里面的，这个线程我们称之为Main线程。当我们通过某个组件来启动另一个组件的时候，这个时候默认都是在同一个线程当中完成的。</p><p>在Android当中，通常将线程分为两种，一种叫做<code>Main Thread</code>，除了Main Thread之外的线程都可称为<code>Worker Thread</code>。</p><p>当一个应用程序运行的时候，Android操作系统就会给该应用程序启动一个线程，这个线程就是我们的Main Thread，这个线程非常的重要，它主要用来加载我们的UI界面，完成系统和我们用户之间的交互，并将交互后的结果又展示给我们用户，所以Main Thread又被称为<code>UI Thread</code>。</p><p>Android系统默认不会给我们的应用程序组件创建一个额外的线程，所有的这些组件默认都是在同一个线程中运行。然而，某些时候当我们的应用程序需要完成一个耗时的操作的时候，例如访问网络或者是对数据库进行查询时，此时我们的UI Thread就会被阻塞。例如，当我们点击一个Button，然后希望其从网络中获取一些数据，如果此操作在UI Thread当中完成的话，当我们点击Button的时候，UI线程就会处于阻塞的状态，此时，我们的系统不会调度任何其它的事件，更糟糕的是，当我们的整个现场如果阻塞时间超过5秒钟(官方是这样说的)，这个时候就会出现 ANR (Application Not Responding)的现象，此时，应用程序会弹出一个框，让用户选择是否退出该程序。对于Android开发来说，出现ANR的现象是绝对不能被允许的。</p><p>另外，由于我们的Android UI控件是线程不安全的，所以我们不能在UI Thread之外的线程当中对我们的UI控件进行操作。因此在Android的多线程编程当中，我们有两条非常重要的原则必须要遵守：</p><ol><li><p>绝对不能在UI Thread当中进行耗时的操作，不能阻塞我们的UI Thread</p></li><li><p>不能在UI Thread之外的线程当中操纵我们的UI元素</p><p>既然在Android当中有两条重要的原则要遵守，那么我们可能就有疑问了？我们既不能在主线程当中处理耗时的操作，又不能在工作线程中来访问我们的UI控件，那么我们比如从网络中要下载一张图片，又怎么能将其更新到UI控件上呢？这就关系到了我们的主线程和工作线程之间的通信问题了。在Android当中，提供了两种方式来解决线程直接的通信问题，一种是通过Handler的机制，这个时候就很可能自己会去封装一下thread+handler了，正是因为这类需求很多，google就帮我们封装了一下。其实我们也可以自己封装，但是我相信99%程序员自己封装的东西比不上google的。所以另外一种就是今天要详细讲解的 AsyncTask 机制。</p></li></ol><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a><strong>原理分析</strong></h3><p>AsyncTask是个abstract类，所以在使用时需要实现一个AsyncTask的具体实现类，一般来说会覆盖4个方法，我们以前面所说的从网络中下载一张图片，然后更新到UI控件来说明：</p><p>（1）onPreExecute()：在执行后台下载操作之前调用，将下载等待动画显示出来，运行在主线程中；</p><p>（2）doInBackground()：核心方法，执行后台下载操作的方法，必须实现的一个方法，运行在子线程中；这个方法是执行在子线程中的。在onPreExecute()执行完后，会立即开启这个方法。</p><p>（3）onProgressUpdate()：在下载操作doInBackground()中调用publishProgress()时的回调方法，用于更新下载进度，运行在主线程中；</p><p>（4）onPostExecute()：后台下载操作完成后调用，将下载等待动画进行隐藏，并更新UI，运行在主线程中；</p><p>通过上面的分析，我们可以知道，AsyncTask的构造方法和execute方法是我们分析AsyncTask的重点。</p><h4 id="1）构造方法"><a href="#1）构造方法" class="headerlink" title="1）构造方法"></a><strong>1）构造方法</strong></h4><p>AsyncTask的构造方法中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AsyncTask</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Looper callbackLooper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mHandler <span class="token operator">=</span> callbackLooper <span class="token operator">==</span> null <span class="token operator">||</span> callbackLooper <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">?</span> <span class="token function">getMainHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>callbackLooper<span class="token punctuation">)</span><span class="token punctuation">;</span>    mWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerRunnable</span><span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Result<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> Result <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            mTaskInvoked<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Result result <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//noinspection unchecked</span>                result <span class="token operator">=</span> <span class="token function">doInBackground</span><span class="token punctuation">(</span>mParams<span class="token punctuation">)</span><span class="token punctuation">;</span>                Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> tr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mCancelled<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> tr<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token function">postResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    mFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Result<span class="token operator">></span><span class="token punctuation">(</span>mWorker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"An error occurred while executing doInBackground()"</span><span class="token punctuation">,</span>                                           e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>mWorker代表了AsyncTask要执行的任务，是对Callable接口的封装，意味着这个任务是有返回值的;</p><p>mFuture代表了AsyncTask要执行的任务的返回结果，其实就是个FutureTask，按照FutureTask标准用法，mWorker作为Callable被传给了mFuture，那么mFuture的结果就从mWorker执行的任务中取得。仔细看mWorker，return语句返回的结果就是我们前面所说的doInBackground()的执行结果。</p><h4 id="2）再看执行流程"><a href="#2）再看执行流程" class="headerlink" title="2）再看执行流程"></a><strong>2）再看执行流程</strong></h4><p>查看源码 execute() -&gt; executeOnExecutor(sDefaultExecutor, params) -&gt; exec.execute(mFuture)</p><p>到了这一步，将mFuture传递给了AsyncTask的执行器进行执行。AsyncTask的执行器缺省是sDefaultExecutor。</p><p>找到成员变量sDefaultExecutor，最终定位到</p><p><img src="/assets/image/asyncTask.png" alt="image-20191028155659665"></p><p>SerialExecutor是对JDK里Executor的一个实现，被声明为一个静态变量，我们仔细看SerialExecutor的实现，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SerialExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ArrayDeque<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> mTasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable mActive<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTasks<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mActive <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">scheduleNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mActive <span class="token operator">=</span> mTasks<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            THREAD_POOL_EXECUTOR<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mActive<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>内部声明了一个双端队列ArrayDeque类型的mTasks（双端队列中offer方法表示从队列尾插入，poll()表示从队列头获取元素）。</p><p>每次调用execute，就创建一个Runnable匿名内部类对象，这个对象存入mTasks，在匿名内部类的run函数里面调用传入参数r.run()。然后通过一个scheduleNext函数把mTasks里面的所有对象通过THREAD_POOL_EXECUTOR.execute(mActive)执行一遍。说穿了，也就是说SerialExecutor类会把所有的任务丢入一个容器，之后把容器里面的所有对象<strong>一个一个的排队（串行化）</strong>执行THREAD_POOL_EXECUTOR.execute(mActive);</p><p>至于这个THREAD_POOL_EXECUTOR，是这样定义的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Executor THREAD_POOL_EXECUTOR<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>        CORE_POOL_SIZE<span class="token punctuation">,</span> MAXIMUM_POOL_SIZE<span class="token punctuation">,</span> KEEP_ALIVE_SECONDS<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>        sPoolWorkQueue<span class="token punctuation">,</span> sThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPoolExecutor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    THREAD_POOL_EXECUTOR <span class="token operator">=</span> threadPoolExecutor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们可以看到这个线程池，被声明为一个静态变量，同时初始化的参数是：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CPU_COUNT <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// We want at least 2 threads and at most 4 threads in the core pool,</span>    <span class="token comment" spellcheck="true">// preferring to have 1 less than the CPU count to avoid saturating</span>    <span class="token comment" spellcheck="true">// the CPU with background work</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CORE_POOL_SIZE <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>CPU_COUNT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_POOL_SIZE <span class="token operator">=</span> CPU_COUNT <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEEP_ALIVE_SECONDS <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> sPoolWorkQueue <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-结果和进度的通知"><a href="#3-结果和进度的通知" class="headerlink" title="3)结果和进度的通知"></a>3)结果和进度的通知</h4><p>AsyncTask的执行结果和进度是怎么通知给UI线程的呢？检视mFuture</p><pre class=" language-java"><code class="language-java">mFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Result<span class="token operator">></span><span class="token punctuation">(</span>mWorker<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"An error occurred while executing doInBackground()"</span><span class="token punctuation">,</span>                                       e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postResultIfNotInvoked</span><span class="token punctuation">(</span>Result result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> wasTaskInvoked <span class="token operator">=</span> mTaskInvoked<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasTaskInvoked<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">postResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Result <span class="token function">postResult</span><span class="token punctuation">(</span>Result result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    Message message <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MESSAGE_POST_RESULT<span class="token punctuation">,</span>                                                 <span class="token keyword">new</span> <span class="token class-name">AsyncTaskResult</span><span class="token operator">&lt;</span>Result<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>和更新进度时我们会调用的publishProgress方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WorkerThread</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">publishProgress</span><span class="token punctuation">(</span>Progress<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MESSAGE_POST_PROGRESS<span class="token punctuation">,</span>                                   <span class="token keyword">new</span> <span class="token class-name">AsyncTaskResult</span><span class="token operator">&lt;</span>Progress<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到都调用了sHandler</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">publishProgress</span><span class="token punctuation">(</span>Progress<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>MESSAGE_POST_PROGRESS<span class="token punctuation">,</span>                                   <span class="token keyword">new</span> <span class="token class-name">AsyncTaskResult</span><span class="token operator">&lt;</span>Progress<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>说明当子线程需要和UI线程进行通信时，其实就是通过这个handler，往UI线程发送消息。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><p>1）线程池的创建：</p><p>在创建了AsyncTask的时候，会默认创建两个线程池SerialExecutor和ThreadPoolExecutor，SerialExecutor负责将任务串行化，ThreadPoolExecutor是真正执行任务的地方，且无论有多少个AsyncTask实例，两个线程池都会只有一份。</p><p>2）任务的执行：</p><p>在execute中，会执行run方法，当执行完run方法后，会调用scheduleNext()不断的从双端队列中轮询，获取下一个任务并继续放到一个子线程中执行，直到异步任务执行完毕。</p><p>3）消息的处理：</p><p>在执行完onPreExecute()方法之后，执行了doInBackground()方法，然后就不断的发送请求获取数据；在这个AsyncTask中维护了一个InternalHandler的类，这个类是继承Handler的，获取的数据是通过handler进行处理和发送的。在其handleMessage方法中，将消息传递给onProgressUpdate()进行进度的更新，也就可以将结果发送到主线程中，进行界面的更新了。</p><p>4）使用AsyncTask的注意点</p><p>通过观察代码我们可以发现，每一个new出的AsyncTask只能执行一次execute()方法，多次运行将会报错，如需多次，需要新new一个AsyncTask。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MainThread</span><span class="token keyword">public</span> <span class="token keyword">final</span> AsyncTask<span class="token operator">&lt;</span>Params<span class="token punctuation">,</span> Progress<span class="token punctuation">,</span> Result<span class="token operator">></span> <span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>Executor exec<span class="token punctuation">,</span>                                                                   Params<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mStatus <span class="token operator">!=</span> Status<span class="token punctuation">.</span>PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>mStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> RUNNING<span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot execute task:"</span>                                                <span class="token operator">+</span> <span class="token string">" the task is already running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FINISHED<span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot execute task:"</span>                                                <span class="token operator">+</span> <span class="token string">" the task has already been executed "</span>                                                <span class="token operator">+</span> <span class="token string">"(a task can be executed only once)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="AsyncTask优缺点"><a href="#AsyncTask优缺点" class="headerlink" title="AsyncTask优缺点"></a><strong>AsyncTask优缺点</strong></h3><p><strong>AsyncTask：</strong></p><p>优点：AsyncTask是一个轻量级的异步任务处理类，轻量级体现在，使用方便、代码简洁上，而且整个异步任务的过程可以通过cancel()进行控制；</p><p>缺点：不适用于处理长时间的异步任务，一般这个异步任务的过程最好控制在几秒以内，如果是长时间的异步任务就需要考虑多线程的控制问题；当处理多个异步任务时，UI更新变得困难。</p><p><strong>Handler:</strong></p><p>优点：代码结构清晰，容易处理多个异步任务；</p><p>缺点：当有多个异步任务时，由于要配合Thread或Runnable，代码可能会稍显冗余。</p><p><strong>总之，</strong>AsyncTask不失为一个非常好用的异步任务处理类，只要不是频繁对大量UI进行更新，可以考虑使用；而Handler在处理大量UI更新时可以考虑使用。</p><h1 id="补充知识：CAS"><a href="#补充知识：CAS" class="headerlink" title="补充知识：CAS"></a>补充知识：CAS</h1><h2 id="什么是原子操作？如何实现原子操作？"><a href="#什么是原子操作？如何实现原子操作？" class="headerlink" title="什么是原子操作？如何实现原子操作？"></a>什么是原子操作？如何实现原子操作？</h2><p>假定有两个操作A和B，如果从执行A的线程来看，当另一个线程执行B时，要么将B全部执行完，要么完全不执行B，那么A和B对彼此来说是原子的。</p><p>实现原子操作可以使用锁，锁机制，满足基本的需求是没有问题的了，但是有的时候我们的需求并非这么简单，我们需要更有效，更加灵活的机制，synchronized关键字是基于阻塞的锁机制，也就是说当一个线程拥有锁的时候，访问同一资源的其它线程需要等待，直到该线程释放锁，这里会有些问题：首先，如果被阻塞的线程优先级很高很重要怎么办？其次，如果获得锁的线程一直不释放锁怎么办？（这种情况是非常糟糕的）。还有一种情况，如果有大量的线程来竞争资源，那CPU将会花费大量的时间和资源来处理这些竞争（事实上CPU的主要工作并非这些），同时，还有可能出现一些例如死锁之类的情况，最后，其实锁机制是一种比较粗糙，粒度比较大的机制，相对于像计数器这样的需求有点儿过于笨重。</p><p>实现原子操作还可以使用当前的处理器基本都支持<code>CAS()</code>的指令，只不过每个厂家所实现的算法并不一样罢了，<strong>每一个CAS操作过程都包含三个运算符：一个内存地址V，一个期望的值A和一个新值B，操作的时候如果这个地址上存放的值等于这个期望的值A，则将地址上的值赋为新值B，否则不做任何操作。</strong>CAS的基本思路就是，如果这个地址上的值和期望的值相等，则给其赋予新值，否则不做任何事儿，但是要返回原值是多少。<strong>循环CAS就是在一个循环里不断的做CAS</strong>操作，直到成功为止。怎么实现线程安全呢？语言层面不做处理，我们将其交给硬件—CPU和内存，利用CPU的多处理能力，实现硬件层面的阻塞，再加上<code>volatile</code>变量的特性即可实现基于原子操作的线程安全。</p><h2 id="CAS实现原子操作的三大问题"><a href="#CAS实现原子操作的三大问题" class="headerlink" title="CAS实现原子操作的三大问题"></a>CAS实现原子操作的三大问题</h2><p>1)  ABA问题。因为CAS需要在操作值的时候，检查值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A→B→A就会变成1A→2B→3A。</p><p>举个通俗点的例子，你倒了一杯水放桌子上，干了点别的事，然后同事把你水喝了又给你重新倒了一杯水，你回来看水还在，拿起来就喝，如果你不管水中间被人喝过，只关心水还在，这就是ABA问题。如果你是一个讲卫生讲文明的小伙子，不但关心水在不在，还要在你离开的时候水被人动过没有，因为你是程序员，所以就想起了放了张纸在旁边，写上初始值0，别人喝水前麻烦先做个累加才能喝水。</p><p>2)  循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p><p>3)  只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如，有两个共享变量i＝2，j=a，合并一下ij=2a，然后用CAS来操作ij。从Java 1.5开始，JDK提供了AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart 语言简述</title>
      <link href="/posts/b8c700d2/"/>
      <url>/posts/b8c700d2/</url>
      
        <content type="html"><![CDATA[<p>最近开始接触Flutter相关的项目，通过源码、例子和一些资料的阅读，发现如果掌握了Dart的一些语法和一些基础对于Flutter的学习有着事半功倍的效果。下面是我在查阅一些资料和实际的开发中的一些总结。希望对今后的学习有所帮助。<br><br></p><a id="more"></a><blockquote><p>Dart 诞生于 2011.10.10 日， 谷歌 Dart 语言项目的领导人 Lars Bak 在丹麦举行的Goto 会议上 布， Dart 种“结构化的 Web 程”语言， Dart 编程语言在所有现代浏览器和环境中提供高性能。</p></blockquote><p>Dart语言的特性：</p><ul><li>Dart 是AOT（Ahead Of Time）编译的，编译成快速、可预测本地的代码。</li><li>Dart也可以JIT（Just In Time）编译，开发周期异常快，包括Flutter流行的亚秒级有状态热重载。</li><li>Dart可以更轻松地创建以60fps运行的流畅动画和状态，Dart可以在没有锁的情况下进行对象分配和垃圾回收。</li><li>Dart使Flutter不需要单独的声明式布局语言，或单独的可视化界面构建器，因为Dart的声明式编程布局易于阅读和可视化。</li></ul><p>Dart重要概念：</p><ul><li>一切皆对象，无论是变量、数字、函数等都是对象，所有的对像都继自Object， 这点类似于 Java 语言。</li><li>程序中指定数据类型使得程序合理地分配内存空间，并帮助编绎器进行语法检查，由于Dart 言是弱数据类型， 所以类型不是必须的 。</li><li>Dart 代码在运行前解析 指定数据类型和编译时的常量， 可以提高运行速度。</li><li>Dart 程序有统 的程序人口： main （） 这一点与 Java C 和 C＋＋ 语言很像。</li><li>Dart 没有 <code>public</code> <code>protected</code> <code>private</code> 这些修饰符的概念，私有特性通过变量或函数加上下划线来表示。</li><li>Dart 工具可以检查出警告信息(<code>warning</code>) 和 错误信息(<code>errors</code>)， 警告信息只是表明代码可能不工作，但是不会妨碍程序运行，错误信息可以是编译时的错误，也可能是运行时的错误， 编译时的错误将阻止程序运行，运行时的错误将会以异常（exception ）的方式呈现。</li><li>Dart 支持 anync/await 异步处理。</li><li>关键字（ 56 个）如下：<img src="/assets/image/dart%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="dart关键字"><ul><li>带有上标 <strong>1</strong> 的关键字是 <strong><em>内置关键字</em></strong>。避免把内置关键字当做标识符使用。 也不要把内置关键字 用作类名字和类型名字。</li><li>带有上标 <strong>2</strong> 的关键字，是在 Dart 1.0 发布以后又新加的，用于支持异步相关的特性。</li></ul></li></ul><h2 id="变量与基本类型"><a href="#变量与基本类型" class="headerlink" title="变量与基本类型"></a>变量与基本类型</h2><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><p>在Dart里，变量的声明有三种方式：</p><ol><li><p>用<code>var</code>关键字</p><p>用var声明变量时，如果未指定初始值，可以变成任意类型。如果指定了类型，则类型会被锁定。如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> v<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始值未指定类型</span>  v <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以变为任意类型</span>  v <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'v: $v'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化时已经指定类型</span>  <span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时无法赋值成功，编译时报错</span><span class="token punctuation">}</span></code></pre></li><li><p>用<code>dynamic</code>关键字</p><p>dynamic声明的变量，表示动态任意类型，编译时不检查类型。如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">dynamic</span> d1 <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>  d1 <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>  d1 <span class="token operator">=</span> <span class="token number">333.0</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"d1: $d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// dynamic修饰的变量，在编译时不做检查</span>  d1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这行还代码，在编译时是不会检查错误信息的，运行时会报错</span><span class="token punctuation">}</span></code></pre></li><li><p>用<code>Object</code></p><p>Object声明的变量，表示任意动态类型，编译时检查类型。如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object o1 <span class="token operator">=</span> <span class="token string">"sss"</span><span class="token punctuation">;</span>  o1 <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>  o1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译时会做检查，报错</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="变量的默认值"><a href="#变量的默认值" class="headerlink" title="变量的默认值"></a>变量的默认值</h3><ul><li>没有初始化的变量会自动获取一个默认值null</li><li>一切皆为对象，对象的默认值为null</li></ul><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a>final 和 const</h3><p>​    final 或 const 修饰的变量为常量或固定值。</p><ul><li>共同点：<ol><li>声明的类型可以省略</li><li>初始化后不能再赋值</li><li>不能和<code>var</code>同时使用</li></ol></li><li>不同点：<ol><li>类级别常量，使用 <code>static const</code></li><li>const 可以使用其它const常量的值来初始化其值</li><li>使用const赋值声明，const可省略</li><li>可以更改非final、非const变量的值，即使曾经具有const值</li><li>const 导致的不可变性是可传递的</li><li>相同的const常量不会在内存中重复创建</li><li>const需要编译时常量</li></ol></li></ul><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>Dart语言常用的基本数据类型包括： <code>Number</code>，<code>String</code>，<code>Boolean</code>，<code>List和Map</code></p><ul><li><p>Number类型</p><p>Number 类型包括 int 整形，double浮点类型，他们都是<code>num</code>类型的子类</p></li><li><p>String类型</p><ul><li>Dart 字符串是 utf-16 编码的字符序列，可以使用单引号或者双引号来创建字符</li><li>可以使用三个单引号或者双引号创建多行字符串对象</li><li>可以使用r前缀创建原始字符串，即输出原始字符，字符串里的转义等符号不会生效</li><li>可以在字符串中使用表达式：<code>"${expression}"</code>，如果表达式是一个标识符，可以省略<code>{}</code>，如果表达式的结果为一个对象，则 Dart会调用对象的<code>toString</code>方法</li></ul></li><li><p>Boolean类型</p><p>Dart是强bool类型检查，只有bool类型的值是true才被认为是true， 如果未赋初值，则为null</p></li><li><p>List类型</p><p>在Dart语言中，具有一系列相同类型的数据称为List对象。Dart中List可以直接打印出出各个元素，而java中则是地址。</p></li><li><p>Map类型</p><p>与java类似。</p></li><li><p>Set</p><ul><li>set1.difference(set2): 返回 set1 集合里有但 set2 里没有的元素集合</li><li>set1.intersection(set2)：返回set1和set2的交集</li><li>set1.union(set2)：返回set1和set2的并集</li><li>set1.retainAll()：set1只保留某些元素(要保留的元素要在原set中存在）</li></ul></li><li><p>Runs </p><ul><li>用在符串中表示Unicode字符</li><li>使用String.fromCharCodes显示字符图形</li><li>如果非4个数值，需要把编码值放到大括号中</li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Dart是一个面向对象的语言,所以函数也是对象，函数属于Function对象。函数可以像参数一样传递给其他函数。</p><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ol><li><p>定义函数时可以省略类型(不建议)</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 参数a,b都省略了类型</span></code></pre></li><li><p>支持缩写语法<code>=&gt;</code> </p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当函数体只有一条语句时可以使用此种写法</span></code></pre></li><li><p>可在函数内定义函数</p><p>可以在函数里定义函数，如：</p><pre class=" language-dart"><code class="language-dart">int <span class="token function">func</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  int <span class="token function">sum</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">,</span> int c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>dart 函数支持闭包</p><pre class=" language-dart"><code class="language-dart">Function <span class="token function">addFunction</span><span class="token punctuation">(</span>int a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> addFunc <span class="token operator">=</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">addFunc</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>所有的函数都有返回值</li><li>如果没有指定函数返回值，则默认的返回值是null</li><li>没有返回值的函数,系统会在最后添加隐式的return语句</li></ul><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><ul><li><p>可选命名参数</p><p>使用<code>{param1, param2,...}</code>的形式来指定命名参数。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func</span><span class="token punctuation">(</span>b<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">{</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>可选位置参数</p><p>将参数使用中括号[]括起来,用来表明是可选位置参数，必填参数要放在可选参数前面。</p><pre class=" language-dart"><code class="language-dart">String <span class="token function">getUserInfo</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> <span class="token punctuation">[</span>String from<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>其中name和sex是必须传入的参数,from参数可以不传</p></li><li><p>参数默认值</p><ul><li>如果参数指定了默认值,当不传入值时，函数就会使用这个默认值。通常默认值参数为null。</li></ul><pre class=" language-dart"><code class="language-dart">String <span class="token function">getUserInfo</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> <span class="token punctuation">[</span>String from <span class="token operator">=</span> <span class="token string">'中国'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>可选命名参数默认值(默认值必须是编译时常量)，可以使用等号<code>=</code> 或冒号<code>:</code>，Dart SDK 1.21 之前只能用冒号，冒号的支持以后会移除，所以建议使用<em>等号</em>。</li><li>可选位置参数默认值(默认值必须是编译时常量)，只能使用等号<code>=</code>。</li><li>可使用list或map作为默认值，但必须是const。</li></ul><pre class=" language-dart"><code class="language-dart">int <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">[</span>List list <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul><li><p>可赋值给变量，通过变量调用</p><pre class=" language-dart"><code class="language-dart"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>可在其他函数中直接调用或传递给其他函数</p></li></ul><h3 id="函数别名"><a href="#函数别名" class="headerlink" title="函数别名"></a>函数别名</h3><p>函数别名使用<code>typedef</code>表示，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">typedef</span> <span class="token function">Fun1</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> Fun2<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> K b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>typedef给函数起一个别名，使用比较方便。例如定义一个方法的回调，直接使用别名定义。</li><li>没返回值，则只要参数匹配就行了，如果定义了返回值，则返回值不一样会报错。</li></ul><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>Flutter应用程序必须要有一个main函数作为程序的入口函数。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Dart所有的运算符如下表所示， 与java不同的有8个，如下：</p><p><code>?.</code>，条件成员访问 和 . 类似，但是左边的操作对象不能为 null，例如 foo?.bar 如果 foo 为 null 则返回 null，否则返回 bar 成员。<br><code>~/</code>，除后取整。<br><code>as</code>，类型转换。<br><code>is</code>，如果对象是指定类型返回true。<br><code>is!</code>，如果对象是指定类型返回false。<br><code>??</code>，双问号左边为true返回左边结果，否则返回右边结果。<br><code>..</code>，级联语法。严格来说， 两个点的级联语法不是一个操作符。 只是一个 Dart 特殊语法。<br><code>??:</code>，如果左边是 null，则右边赋值给左边；如果不是 null，则左边的值保持不变。</p><table><thead><tr><th><strong>描述</strong></th><th align="center"><strong>操作符</strong></th></tr></thead><tbody><tr><td>后缀操作</td><td align="center">expr++ expr– () [] . <code>?.</code></td></tr><tr><td>前缀操作</td><td align="center">-expr !expr ~expr ++expr –expr</td></tr><tr><td>乘除</td><td align="center">* /  % <code>~/</code></td></tr><tr><td>加减</td><td align="center">+ -</td></tr><tr><td>位移</td><td align="center">&lt;&lt; &gt;&gt;</td></tr><tr><td>按位与</td><td align="center">&amp;</td></tr><tr><td>按位异或</td><td align="center">^</td></tr><tr><td>按位或</td><td align="center">|</td></tr><tr><td>类型操作</td><td align="center">&gt;= &gt; &lt;= &lt; <code>as</code> <code>is</code> <code>is!</code></td></tr><tr><td>相等</td><td align="center">== !=</td></tr><tr><td>逻辑与</td><td align="center">&amp;&amp;</td></tr><tr><td>逻辑或</td><td align="center">||</td></tr><tr><td>是否为空</td><td align="center"><code>??</code></td></tr><tr><td>三目运算</td><td align="center">expr1 ? expr2 : expr3</td></tr><tr><td>级联</td><td align="center"><code>..</code></td></tr><tr><td>赋值</td><td align="center">= *= /= ~/= %= += -= &lt;&lt;= &gt;&gt;= &amp;= ^= |=  <code>??=</code></td></tr></tbody></table><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p>Dart中控制流程语句和Java类似。List和Set等实现了Iterable接口的类支持for-in遍历元素。</p><ul><li>if  else</li><li>for forEach <code>for-in</code></li><li>while  do-while</li><li>break continue</li><li>switch case</li><li>assert</li><li>try-catch throw</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常是表示发生意外错误，如果没有捕获异常，引发异常的隔离程序将被挂起，并且程序终止。</p><p>Dart代码可抛出并捕获异常，但Dart的所有异常都是<strong>未检查异常</strong>，方法不声明他们可能抛出的异常,也不需要捕获任何异常。<br>Dart 代码可以抛出任何非 null 对象为异常，不仅仅是实现了 Exception 或者 Error 的对象。<br>可以使用on 或者 catch 来声明捕获语句，也可以 同时使用。使用 on 来指定异常类型，使用 catch 来 捕获异常对象。</p><ol><li><p>抛出异常</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 抛出Exception对象</span><span class="token keyword">throw</span> <span class="token function">FormatException</span><span class="token punctuation">(</span><span class="token string">'抛出一个ｆormatException'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 抛出Error对象</span><span class="token keyword">throw</span> <span class="token function">OutMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//或自定义异常</span><span class="token keyword">throw</span> <span class="token string">'数据非法'</span></code></pre></li><li><p>捕获异常</p><p><code>catch()</code> 可以指定一个或两个参数来捕获异常，第一个是抛出的异常，第二个是堆栈跟踪，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> on Error <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 捕获异常详细信息</span><span class="token punctuation">}</span> <span class="token keyword">catch</span>　<span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 堆栈跟踪信息</span><span class="token punctuation">}</span></code></pre><p><code>rethrow</code> 把捕获的异常重新抛出</p></li><li><p>Finally</p></li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>Dart作为高级语言支持面向对象的很多特性并且支持基于<code>mixin</code>的继承方式。基于mixin的继承方式是值：一个类可以继承多个父类，相当于其他语言里的多继承，所有的类都有同一个基类<code>Object</code>。</p><h3 id="实例化成员变量"><a href="#实例化成员变量" class="headerlink" title="实例化成员变量"></a>实例化成员变量</h3><p>类定义中所有的变量都会隐式的定义Setter方法，针对非空的变量会额外增加getter方法</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>dart的构造函数有多种形式，如下：</p><ul><li><p>常规构造函数</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  String name<span class="token punctuation">;</span>  int age<span class="token punctuation">;</span>  <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> int age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 或</span>  <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>命名的构造函数</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  String name<span class="token punctuation">;</span>  int age<span class="token punctuation">;</span>  User<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map json<span class="token punctuation">)</span> <span class="token punctuation">{</span>      name <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      age <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用命名构造函数可以为一个类实现多个构造函数， 或者使用命名构造函数来更清晰的表明你的意图。</p></li><li><p>重定向构造函数</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  String name<span class="token punctuation">;</span>  int age<span class="token punctuation">;</span>  <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>一个重定向构造函数是没有代码的，在构造函数声明后，使用 冒号调用其他构造函数。</p></li><li><p>构造函数初始化列表</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// final 修饰的成员变量，只能通过构造方法进行赋值</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  <span class="token keyword">final</span> int age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化列表</span>  <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>      <span class="token punctuation">:</span> name <span class="token operator">=</span> name<span class="token punctuation">,</span>        age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在构造函数体执行之前可以初始化实例参数。 使用逗号分隔初始化表达式。初始化列表非常适合用来设置 final 变量的值。</p></li><li><p>调用超类构造函数</p><p>在构造方法处使用<code>super</code>关键字，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// final 修饰的成员变量，只能通过构造方法进行赋值</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  <span class="token keyword">final</span> int age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化列表</span>  <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>常量构造函数</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义const构造函数要确保所有的成员变量都是final修饰</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  <span class="token keyword">final</span> int age<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> User user <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// const 关键字放在构造函数名前，且不能有函数体</span>  <span class="token keyword">const</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>工厂构造函数(单例)</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//工厂构造函数无法访问this，所以这里要用static</span>  <span class="token keyword">static</span> User _user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//工厂方法构造函数，关键字factory</span>  <span class="token keyword">factory</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">[</span>String name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> User<span class="token punctuation">.</span>_user <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义一个命名构造函数用来生产实例</span>  User<span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="读取和写入对象（Getter、Setter）"><a href="#读取和写入对象（Getter、Setter）" class="headerlink" title="读取和写入对象（Getter、Setter）"></a>读取和写入对象（Getter、Setter）</h3><ul><li>get()和set()方法是专门用于读取和写入对象的属性的方法。</li><li>每一个类的实例，系统都隐式地包含有get()和set()方法。</li><li>final 修饰的变量没有setter方法。</li><li>可以使用get 和 set 关键字定义getter和setter。</li></ul><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  String name<span class="token punctuation">;</span>  <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  String <span class="token keyword">get</span> username <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'getter ${this.name}'</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">username</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="重载操作"><a href="#重载操作" class="headerlink" title="重载操作"></a>重载操作</h3><p>采用operator修饰，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> int x<span class="token punctuation">;</span>  <span class="token keyword">final</span> int y<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">+</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>抽象类采用<code>abstract</code>关键字修饰<code>class</code>。f</li><li>不能被实例化，除非定义一个工厂构造函数。</li><li>抽象类通常用来定义接口， 以及部分实现。</li><li>抽象类通常具有抽象方法，抽象方法不需要关键字，以分号结束即可。</li><li>接口方式使用时，需要重写抽象类的成员变量和方法，包括私有的。</li><li>一个类可以implement一个普通类。Dart任何一个类都是接口。</li><li>一个类可以implement多个接口。</li></ul><h3 id="可调用类"><a href="#可调用类" class="headerlink" title="可调用类"></a>可调用类</h3><p>类实现 <code>call()</code> 方法可以让类像函数一样能够被调用。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ClassFunction</span> <span class="token punctuation">{</span>  <span class="token function">call</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">,</span> String c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'$a, $b, $c'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> cf <span class="token operator">=</span> <span class="token function">ClassFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> out <span class="token operator">=</span> <span class="token function">cf</span><span class="token punctuation">(</span><span class="token string">'a1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'c1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'out: $out'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span>runtimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>runtimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>cf <span class="token operator">is</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>与java一致，采用<code>enum</code>修饰。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Type <span class="token punctuation">{</span>  A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">}</span></code></pre><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>Mixins(混入功能)相当于多继承，使用with关键字来实现Mixins的功能</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'S.a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'A.a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'A.b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> A <span class="token keyword">with</span> S<span class="token punctuation">;</span></code></pre><ol><li>子类没有重写超类A方法的前提下，如果2个或多个超类拥有相同签名的A方法，那么子类会以继承的最后一个超类中的A方法为准。</li><li>如果子类自己重写了A方法则以本身的A方法为准。</li></ol><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>Dart1.21开始可以使用泛型函数。泛型函数可以在以下几个地方使用类型参数：</p><ul><li>函数的返回值类型。</li><li>参数的类型。</li><li>局部变量的类型。</li></ul><pre class=" language-dart"><code class="language-dart"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  K addCache<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    K temp <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${key}: ${value}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token function">addCache</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>要在使用构造函数时指定一个或多个类型，可将类型放在类名称后面的尖括号&lt;…&gt;中:</p><pre class=" language-dart"><code class="language-dart"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> Phone<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>mobileNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> T mobileNumber<span class="token punctuation">;</span>  <span class="token function">Phone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mobileNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现泛型类型时，您可能希望限制其参数的类型，可以在<code>&lt;&gt;</code>里面使用<code>extends</code>。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> man <span class="token operator">=</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> m <span class="token operator">=</span> User<span class="token operator">&lt;</span>Man<span class="token operator">></span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>  m<span class="token punctuation">.</span>man<span class="token punctuation">.</span><span class="token function">doMassage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Man</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> T man<span class="token punctuation">;</span>  <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">doMassage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>与java一致， 唯一区别：Java泛型是编译时的，在运行时泛型信息会被擦除，Dart的泛型类型是固化的，在运行时也可以判断具体类型。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>names <span class="token operator">is</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span>runtimeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// List&lt;String> </span></code></pre><h2 id="库的使用"><a href="#库的使用" class="headerlink" title="库的使用"></a>库的使用</h2><h3 id="引用库"><a href="#引用库" class="headerlink" title="引用库"></a>引用库</h3><p>通过import语句在一个库中引入另一个库文件：</p><ol><li>在import语句后面需要接上库文件的路径</li><li>对dart语言提供的库文件使用dart:xx格式</li><li>第三方的库文件使用package:xx格式</li></ol><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:io'</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string">'package:mylib/mylib.dart'</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string">'package :utils/utils.dart'</span> <span class="token punctuation">;</span> </code></pre><h3 id="指定一个库的前缀"><a href="#指定一个库的前缀" class="headerlink" title="指定一个库的前缀"></a>指定一个库的前缀</h3><p>当引用的库拥有相互冲突的名字，可以为其中一个或几个指定不一样的前缀。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:libl/ libl.dart '</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string">'package:lib2 / lib2.dart '</span> <span class="token operator">as</span> lib2 <span class="token punctuation">;</span></code></pre><h3 id="引用库的一部分"><a href="#引用库的一部分" class="headerlink" title="引用库的一部分"></a>引用库的一部分</h3><p>如果只需要使用库的一部分内容，可以有选择性地引用，有如下关键字：</p><ul><li>show 关键字：　只引用一点</li><li>hide 关键字：　除此之外都引用</li></ul><pre class=" language-dart"><code class="language-dart">／／ 导入 foo<span class="token keyword">import</span> <span class="token string">'package:libl/libl.dart'</span> show foo<span class="token punctuation">;</span> ／／ 除了 foo 导入其他所有内容<span class="token keyword">import</span> <span class="token string">'package:lib2 / lib2.dart'</span> hide foo<span class="token punctuation">;</span> </code></pre><h3 id="库的延迟载入"><a href="#库的延迟载入" class="headerlink" title="库的延迟载入"></a>库的延迟载入</h3><ul><li>使用<code>deferred as</code>导入</li><li>使用标识符调用<code>loadLibrary()</code> 加载库</li></ul><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:io'</span> <span class="token keyword">deferred</span> <span class="token operator">as</span> io<span class="token punctuation">;</span><span class="token function">lazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//使用 await 关键字暂停代码执行一直到库加载完成。</span>  <span class="token keyword">await</span> io<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">lazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>优点：<ul><li>可提高程序启动速度。</li><li>用在不常使用的功能。</li><li>用在载入时间过长的包。</li><li>执行 A/B 测试，例如 尝试各种算法的 不同实现。</li></ul></li></ul><h2 id="异步使用"><a href="#异步使用" class="headerlink" title="异步使用"></a>异步使用</h2><p>Dart支持异步操作，一般使用<code>async</code>函数和<code>await</code>表达式实现异步操作，Dart库提供<code>asynchronous</code>功能,该功能提供接口来消耗时间的操作，比如文件读写,网络请求。该功能返回<code>Future</code>或<code>Stream</code>对象。</p><p>可以通过如下的方式来获取asynchronous功能返回的Future对象值:</p><ul><li>使用async函数和await表达式</li><li>使用Future功能提供的API</li></ul><p>可以通过如下方式来获取asynchronous功能返回的Stream对象的值:</p><ul><li>使用async和一个异步的循环(await for)</li><li>使用Stream的相关API</li></ul><h3 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h3><p>await关键字必须在async函数内部使用，await表达式可以使用多次</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">getName1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getName3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Future <span class="token function">getName1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">getStr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">getStr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>'getName1’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getStr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>'getStr1’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getStr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>'getStr2’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>'getName2’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getName3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>'getName3’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// 输出结果： getStr1 getName2  getName3  getStr2  getName1</span></code></pre><h3 id="then-catchError-whenComplete"><a href="#then-catchError-whenComplete" class="headerlink" title="then,catchError,whenComplete"></a>then,catchError,whenComplete</h3><p>如果需要监听“完毕”这个状态，那么用<code>whenComplete</code>，需要监听“成功”这个状态，用<code>then</code>，需要监听“失败”这个状态，用<code>catchError</code>。<br>如果重写了test方法，test返回true就可以在catchError的onError方法里捕获到异常，如果test返回false，就把该异常继续抛出而不会在catchError方法里被捕获，如果不写test默认实现一个返回true的test方法</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">futureTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//异步任务的函数</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"result:$m"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//任务执行完后的子任务</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//其中m为上个任务执行完后的返回的结果</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">printLength</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 拦截错误，如果实现了test方法，只有return true时才会拦截，否则不会</span>      <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">whenTaskCompelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//所有任务完成后的回调函数</span><span class="token punctuation">}</span><span class="token function">whenTaskCompelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'task complete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">futureTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'future'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printLength</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">is!</span> String <span class="token operator">||</span> name<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> name<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token string">'长度错误'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Event-Looper"><a href="#Event-Looper" class="headerlink" title="Event-Looper"></a>Event-Looper</h3><p><img src="/assets/image/event-loop.png" alt="event-loop"></p><p><img src="/assets/image/event-loop-process.png" alt="event-loop-process.png"></p><ol><li>一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。</li><li>消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如上图的消息队列就包含了定时器消息和用户输入消息。</li><li>Dart中的<code>Main Isolate</code>只有一个<code>Event Looper</code>，但是存在两个Event Queue: <code>Event Queue</code>以及<code>Microtask Queue</code>。</li></ol><h3 id="Event-Queue和Microtask-Queue"><a href="#Event-Queue和Microtask-Queue" class="headerlink" title="Event Queue和Microtask Queue"></a>Event Queue和Microtask Queue</h3><p><img src="/assets/image/event-microtask.png" alt="event-microtask.png"></p><ul><li>优先全部执行完Microtask Queue中的Event。</li><li>直到Microtask Queue为空时，才会执行Event Queue中的Event。</li><li>当Event Looper正在处理Microtask Queue中的Event时候，Event Queue中的Event就停止了处理了，此时App不能绘制任何图形，不能处理任何鼠标点击，不能处理文件IO等等。</li><li>绘制图形，处理鼠标点击，处理文件IO等都是在Event Queue里完成的。</li></ul><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><ul><li>使用Future类，可以将任务加入到Event Queue的队尾</li><li>使用scheduleMicrotask函数，将任务加入到Microtask Queue队尾</li><li>优先全部执行完Microtask Queue中的Event，直到Microtask Queue为空时，才会执行Event Queue中的Event。</li></ul><h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><ul><li>使用 Future（）将任务加入event队列。</li><li>Future中的<code>then</code>并没有创建新的Event丢到<code>Event Queue</code>中，而只是一个普通的<code>Function Call</code>，在FutureTask执行完后，立即开始执行。</li><li>如果在then()调用之前Future就已经执行完毕了，那么任务会被加入到<code>microtask</code>队列中，并且该任务会执行then()中注册的回调函数。</li><li>使用Future.value构造函数的时候，就会上一条一样，创建Task丢到microtask Queue中执行then传入的函数。</li><li>Future.sync构造函数执行了它传入的函数之后，也会立即创建Task丢到microtask Queue中执行。</li><li>当任务需要延迟执行时，可以使用new Future.delay()来将任务延迟执行。</li></ul><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">testFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">testFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Future f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Future f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Future f1 = new Future.delayed(Duration(seconds: 1) ,() => null);</span>  Future f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Future f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  f3<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'f2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  f2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'f3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'f4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'f5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  f1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'f6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'f7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="scheduleMicrotask"><a href="#scheduleMicrotask" class="headerlink" title="scheduleMicrotask()"></a>scheduleMicrotask()</h3><ul><li>如果可以，尽量将任务放入event队列中。</li><li>使用Future的then方法或whenComplete方法来指定任务顺序。</li><li>为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。</li><li>大计算量的任务放入额外的isolate中。</li></ul><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:async'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">testScheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">testScheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Future<span class="token punctuation">.</span>delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s6'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s7'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'s9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="隔离（isolate）"><a href="#隔离（isolate）" class="headerlink" title="隔离（isolate）"></a>隔离（isolate）</h2><p>所有Dart代码都在隔离区内运行，而不是线程。每个隔离区都有自己的内存堆，确保不会从任何其他隔离区访问隔离区的状态。</p><p>Dart没有共享内存的并发，没有竞争的可能性所以不需要锁，也就不用担心死锁的问题。</p><p>isolate之间没有共享内存，所以他们之间的通信唯一方式只能是通过Port进行，而且Dart中的消息传递总是异步的。</p><p>isolate神似Thread，但实际上两者有本质的区别。操作系统内的线程之间是可以有共享内存的而isolate没有，这是最为关键的区别。</p><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>使用元数据给代码添加更多的信息。元数据是以＠开始的修饰符，在＠后面接着编译时的常量或者一个常量构造函数。</p><ul><li>@deprecated 被弃用</li><li>@override　重写</li><li>@proxy 代理</li></ul><p>元数据可以修饰 library、class、typedef、type parameter、constructor、factory、function、field、parameter、variable declaration。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>单行注释以//开头。Dart编译器会忽略//和行尾之间的所有内容。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 这是单行注释</span></code></pre></li><li><p>多行注释以/<em>开头，以</em>/结尾。介于/*和 */两者之间的内容会被编译器忽略（除非该注释是一个文档注释)。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/* * 这是多行注释 * 这是多行注释  */</span></code></pre><p>多行注释可以嵌套</p></li><li><p>文档注释以///或者/**开头。可以通过dartdoc命令导出文档。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 这是文档注释</span><span class="token comment" spellcheck="true">/**  * 这是文档注释  */</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App启动优化</title>
      <link href="/posts/6241fe4b/"/>
      <url>/posts/6241fe4b/</url>
      
        <content type="html"><![CDATA[<h1 id="App启动流程"><a href="#App启动流程" class="headerlink" title="App启动流程"></a>App启动流程</h1><br><p>随着手机的运行内存（RAM）越来越大，CPU处理能力越来越强的情况，App的启动速度给用户的印象越来越重要，所以App启动优化也势在必行，下面是我在App优化过程中做的一些笔记。</p><h2 id="Android-系统的启动"><a href="#Android-系统的启动" class="headerlink" title="Android 系统的启动"></a>Android 系统的启动</h2><p>Android开机执行过程如下图所示：</p><p><img src="/assets/image/Android%E7%B3%BB%E7%BB%9F%E5%BC%80%E6%9C%BA%E8%BF%87%E7%A8%8B%E5%9B%BE.jpg" alt="Android系统开机过程图"></p><ol><li>按下电源时，固化在ROM上的引导芯片代码会开始执行，去加载<code>Bootloader</code>到RAM并开始执行；</li><li>Bootloader 会将操作系统拉起来并运行；</li><li><code>Linux Kernel</code>启动开启系统设置，找到文件<code>init.rc</code>启动初始化进程；</li><li>init进程初始化和启动属性服务后开启<code>Zygote</code>进程；</li><li>Zygote开启创建虚拟机并注册<code>JNI</code>方法，开启<code>SystemServer</code>；</li><li>SystemServer 启动<code>Binder</code>线程池和<code>SystemServiceManager</code>并启动各种服务, 如<code>ActivityManagerService</code>；</li><li>AMS(ActivityManagerService)启动<code>Launcher</code></li></ol><h2 id="Launcher启动"><a href="#Launcher启动" class="headerlink" title="Launcher启动"></a>Launcher启动</h2><h3 id="adb命令"><a href="#adb命令" class="headerlink" title="adb命令"></a>adb命令</h3><ol><li><p>查看当前的Activity名称</p><pre class=" language-shell"><code class="language-shell">adb shell dumpsys activity activities </code></pre></li><li><p>查看进程</p><pre class=" language-shell"><code class="language-shell">adb shell ps</code></pre><br>### Application启动</li></ol><p><code>Launcher</code>源码查看：<a href="http://androidxref.com/" target="_blank" rel="noopener">Android XRef</a></p><ol><li><p>当我们点击程序图标时，就会执行<code>Launcher</code>类中的<code>onClick</code>方法并把程序的相关信息传入；</p></li><li><p>先获取一个<code>intent---&gt;startActivitySafely(v, intent, tag)--》startActivity(v, intent, tag);--&gt;startActivity(intent)</code>；</p></li><li><p>startActivity的流程如下：</p><p><img src="/assets/image/1563348657531.png" alt="1563348657531"></p><p>startActivity会开启一个App进程，ActivityThread.java 作为入口，用attach开启App然后再加载Application和ActivityThread.attach –&gt; mgr.attachApplication(mAppThread)，会通过远端进程去回调private void handleBindApplication(AppBindData data)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleBindApplication</span><span class="token punctuation">(</span>AppBindData data<span class="token punctuation">)</span><span class="token punctuation">{</span>   Application app <span class="token operator">=</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span>创建Application对象     mInstrumentation<span class="token punctuation">.</span><span class="token function">callApplicationOnCreate</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span>》 app<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                </code></pre></li></ol><h2 id="黑白屏问题"><a href="#黑白屏问题" class="headerlink" title="黑白屏问题"></a>黑白屏问题</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--白屏--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.AppCompat.Light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--黑屏 （在以前的老版本上有效，现在的版本默认使用透明处理了）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>黑白屏的主要原因是我们app启动耗时太长即Application中onCreate方法执行时间太长导致的，目前的我所做的修改有如下2步。</p><h4 id="提升用户体验"><a href="#提升用户体验" class="headerlink" title="提升用户体验"></a>提升用户体验</h4><p>添加Splash主题，执行<code>Applciation#onCreate()</code>时显示该主题，这样可以快速打开App</p><ul><li><p>在res/values/中修改样式：</p><ul><li><p>在默认的<code>res/values/styles/styles.xml</code>中添加一个<code>splash</code>主题</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StartSplashTheme<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置一张默认的背景图来替代白屏或者黑屏--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowBackground<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@drawable/logo_splash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowFullscreen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>windowNoTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowContentOverlay<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowNoTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li><li><p>新建<code>res/values/sytles-v21/styles.xml</code>中添加一个<code>splash</code>主题：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StartSplashTheme<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    &lt;item name=<span class="token string">"android:windowBackground"</span>>@drawable/logo_splash&lt;/item>    &lt;item name=<span class="token string">"android:windowFullscreen"</span>>true&lt;/item>    &lt;item name=<span class="token string">"windowNoTitle"</span>>true&lt;/item>    &lt;item name=<span class="token string">"android:windowNoTitle"</span>>true&lt;/item>    &lt;item name=<span class="token string">"android:windowDrawsSystemBarBackgrounds"</span>>false&lt;/item>    &lt;item name=<span class="token string">"android:windowContentOverlay"</span>>@null&lt;/item></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li><li><p>新建<code>res/values/sytles-v27/styles.xml</code>中添加一个<code>splash</code>主题：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StartSplashTheme<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AppTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    &lt;item name=<span class="token string">"android:windowBackground"</span>>@drawable/ic_splash&lt;/item>    &lt;item name=<span class="token string">"android:windowFullscreen"</span>>true&lt;/item>    &lt;item name=<span class="token string">"windowNoTitle"</span>>true&lt;/item>    &lt;item name=<span class="token string">"android:windowNoTitle"</span>>true&lt;/item>    &lt;item name=<span class="token string">"android:windowContentOverlay"</span>>@null&lt;/item>    &lt;item name=<span class="token string">"android:windowDrawsSystemBarBackgrounds"</span>>false&lt;/item>    &lt;item name=<span class="token string">"android:windowTranslucentNavigation"</span>>true&lt;/item>    &lt;item name=<span class="token string">"android:windowLayoutInDisplayCutoutMode"</span> <span class="token property">tools</span><span class="token punctuation">:</span>targetApi=<span class="token string">"p"</span>>shortEdges&lt;/item></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>在<code>SplashActivity</code>中设置主题</p><p>AndroidManifest.xml</p><pre class=" language-xml"><code class="language-xml">&lt;activity          android:name="com.xx.xx.splash.SplashActivity"          android:label="@string/app_name"          android:screenOrientation="portrait"          <span class="token comment" spellcheck="true">&lt;!--设置该主题--></span>          android:theme="@style/StartSplashTheme">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="优化Application-onCreate-中的耗时方法"><a href="#优化Application-onCreate-中的耗时方法" class="headerlink" title="优化Application#onCreate()中的耗时方法"></a>优化Application#onCreate()中的耗时方法</h3><h4 id="启动时间查看"><a href="#启动时间查看" class="headerlink" title="启动时间查看"></a>启动时间查看</h4><p>4.4 以前可以使用adb命令：</p><pre class=" language-shell"><code class="language-shell">adb shell am start -W com.xx.xx.splash.SplashActivity</code></pre><p>4.4 以后版本在<code>Logcat</code>输入<code>Display</code>筛选系统日志，不过滤信息No Filters</p><h4 id="采用Trace工具分析代码执行时间"><a href="#采用Trace工具分析代码执行时间" class="headerlink" title="采用Trace工具分析代码执行时间"></a>采用Trace工具分析代码执行时间</h4><pre class=" language-java"><code class="language-java">File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"xmh.trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Debug<span class="token punctuation">.</span><span class="token function">startMethodTracing</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*****************************************************************************/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>需要检测的代码<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/*****************************************************************************/</span>    Debug<span class="token punctuation">.</span><span class="token function">stopMethodTracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将文件拉取，然后在<code>Android Studio</code>中利用 <code>Profile</code>查看。</p><h4 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h4><ol><li>开启一个优先级低的线程，去处理没有<code>handler</code>相关、不操作<code>UI</code>和对异步要求不高的；</li><li>懒加载， 用到的时候才去初始化，一些常量的初始化可以使用类的静态代码块去处理。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的静态代码块在kotlin中的表现形式</title>
      <link href="/posts/8f46bf8a/"/>
      <url>/posts/8f46bf8a/</url>
      
        <content type="html"><![CDATA[<p>在<code>java</code>中我们有时候会用到类的静态代码块来初始化一些变量，那么在<code>kotlin</code>中如何表示呢？</p><a id="more"></a><p>看以下代码：</p><p><code>TestStatic.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStatic</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码，在<code>kotlin</code>中可以这样表示：</p><p><code>TestStatic.kt</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> TestStatic <span class="token punctuation">{</span>    <span class="token keyword">companion</span> oject <span class="token punctuation">{</span>        <span class="token keyword">init</span> <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static test"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译后的<code>java</code>代码:</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> StaticTest<span class="token punctuation">.</span>Companion Companion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticTest<span class="token punctuation">.</span>Companion</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DefaultConstructorMarker<span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">{</span>      String var0 <span class="token operator">=</span> <span class="token string">"static"</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var0<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Companion</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String var1 <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token function">Companion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// $FF: synthetic method</span>      <span class="token keyword">public</span> <span class="token function">Companion</span><span class="token punctuation">(</span>DefaultConstructorMarker $constructor_marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，<code>init</code>方法最终被编译成了<code>static</code>代码块。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具集</title>
      <link href="/posts/d07fae66/"/>
      <url>/posts/d07fae66/</url>
      
        <content type="html"><![CDATA[<p>一些常用网址和工具集合，持续更新中……</p><a id="more"></a><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><ul><li>反编译工具： <a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">https://github.com/skylot/jadx</a></li></ul><h1 id="Idea激活码"><a href="#Idea激活码" class="headerlink" title="Idea激活码"></a>Idea激活码</h1><p>有效网址： <a href="https://www.jiweichengzhu.com/article/eb340e382d1d456c84a1d190db12755c" target="_blank" rel="noopener">https://www.jiweichengzhu.com/article/eb340e382d1d456c84a1d190db12755c</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dagger2在Android中的使用</title>
      <link href="/posts/e781e647/"/>
      <url>/posts/e781e647/</url>
      
        <content type="html"><![CDATA[<hr><p><a href="/posts/cbb172f8">Dagger 2 完全解析（一）,基本使用与原理</a><br><a href="/posts/b74c4b6c">Dagger 2 完全解析（二）, 进阶使用</a><br><a href="/posts/e30bee8a">Dagger 2 完全解析（三）,  Component 与 SubComponent</a><br><a href="/posts/e781e647">Dagger 2 完全解析（四）,在Android中的使用</a></p><blockquote><p>本系列文章是基于 Google Dagger 2.23.2 版本， Kotlin 1.3.21版本</p></blockquote><hr><p>在Android项目中使用Dagger2时，像 <code>Activity</code>和<code>Fragment</code>这种类型的初始化操作都是有Android系统提供的，如果要往其注入对象，不免会有这样的写法：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> activity<span class="token operator">:</span> MainActivity    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        DaggerMainActivityComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">mainActivityModule</span><span class="token punctuation">(</span><span class="token function">MainActivityModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">appComponent</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>application <span class="token keyword">as</span> MyApplication<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>daggerAppComponent            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述写法，会有以下几个我们几乎无法避免的问题：</p><ol><li><p>上述Dagger部分的代码存在<strong>模板代码</strong>，在每个Activity中都会这么写到，即便抽取到BaseActivity中，也有一些特殊部分需要在每个Activity中单独处理，随着业务的增加后期维护不易；</p></li><li><p>从上面的代码可以看出，<code>MainActivityModule</code>中持有了<code>MainActivity</code>实例，并且需要在<code>MainActivity</code>传入参数，它打破了依赖注入的核心原则：<strong>类不应该知道它是如何注入的。</strong></p></li></ol><p>因此为了解决上面的问题，谷歌官方推出了<code>dagger.android</code>。</p><p>下面是基本的使用方式，包括如何注入<code>Activity</code>和<code>Fragment</code>,本篇只讲如何使用，后续再分析其原理。</p><h2 id="引入Dagger-android依赖"><a href="#引入Dagger-android依赖" class="headerlink" title="引入Dagger.android依赖"></a>引入<code>Dagger.android</code>依赖</h2><p>在<code>build.gradle</code>中添加：</p><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'com.google.dagger:dagger-android:2.23.2'</span>implementation <span class="token string">'com.google.dagger:dagger-android-support:2.23.2'</span>kapt <span class="token string">'com.google.dagger:dagger-android-processor:2.23.2'</span></code></pre><h2 id="注入Activity"><a href="#注入Activity" class="headerlink" title="注入Activity"></a>注入Activity</h2><p>以<code>MainActivity</code>为例</p><h3 id="Dagger2中的写法"><a href="#Dagger2中的写法" class="headerlink" title="Dagger2中的写法"></a>Dagger2中的写法</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里只是做了一个例子</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> activity<span class="token operator">:</span> MainActivity    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        DaggerMainActivityComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">mainActivityModule</span><span class="token punctuation">(</span><span class="token function">MainActivityModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">appComponent</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>application <span class="token keyword">as</span> MyApplication<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>daggerAppComponent            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation builtin">@ActivityScope</span><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>MainActivityModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dependencies <span class="token operator">=</span> <span class="token punctuation">[</span>AppComponent<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> MainActivityComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">inject</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> MainActivity<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> <span class="token function">MainActivityModule</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> activity<span class="token operator">:</span> MainActivity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideMainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MainActivity <span class="token operator">=</span> activity<span class="token punctuation">}</span><span class="token annotation builtin">@Scope</span><span class="token keyword">annotation</span> <span class="token keyword">class</span> ActivityScope</code></pre><h3 id="Dagger2-Android中的写法"><a href="#Dagger2-Android中的写法" class="headerlink" title="Dagger2-Android中的写法"></a>Dagger2-Android中的写法</h3><h4 id="修改MainActivityComponent"><a href="#修改MainActivityComponent" class="headerlink" title="修改MainActivityComponent"></a>修改<code>MainActivityComponent</code></h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@ActivityScope</span><span class="token annotation builtin">@Subcomponent</span><span class="token keyword">interface</span> MainActivityComponent <span class="token operator">:</span> AndroidInjector<span class="token operator">&lt;</span>MainActivity<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明MainActivity创建的工厂接口</span>    <span class="token label symbol">@dagger</span><span class="token punctuation">.</span>Subcomponent<span class="token punctuation">.</span>Factory    <span class="token keyword">interface</span> Factory <span class="token operator">:</span> AndroidInjector<span class="token punctuation">.</span>Factory<span class="token operator">&lt;</span>MainActivity<span class="token operator">></span><span class="token punctuation">}</span></code></pre><h4 id="修改MainActivityModule"><a href="#修改MainActivityModule" class="headerlink" title="修改MainActivityModule"></a>修改<code>MainActivityModule</code></h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Module</span><span class="token punctuation">(</span>subcomponents <span class="token operator">=</span> <span class="token punctuation">[</span>MainActivityComponent<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> MainActivityModule <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// module中提供绑定工厂方法</span>    <span class="token annotation builtin">@Binds</span>    <span class="token annotation builtin">@IntoMap</span>    <span class="token annotation builtin">@ClassKey</span><span class="token punctuation">(</span>MainActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">bind</span><span class="token punctuation">(</span>        factory<span class="token operator">:</span> MainActivityComponent<span class="token punctuation">.</span>Factory    <span class="token punctuation">)</span><span class="token operator">:</span> AndroidInjector<span class="token punctuation">.</span>Factory<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">}</span></code></pre><h4 id="修改onCreate-中的Dagger注入"><a href="#修改onCreate-中的Dagger注入" class="headerlink" title="修改onCreate()中的Dagger注入"></a>修改<code>onCreate()</code>中的Dagger注入</h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 在super.onCreate前添加</span>   AndroidInjection<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>   <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>   <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="修改MyApplication"><a href="#修改MyApplication" class="headerlink" title="修改MyApplication"></a>修改<code>MyApplication</code></h4><p>通过<code>dagger.android</code>注入时，Application中也发生了相应的变化</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MyApplication <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HasAndroidInjector <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> dispatchingAndroidInjector<span class="token operator">:</span> DqispatchingAndroidInjector<span class="token operator">&lt;</span>Any<span class="token operator">></span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        DaggerAppComponent<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">androidInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AndroidInjector<span class="token operator">&lt;</span>Any<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dispatchingAndroidInjector    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token label symbol">@dagger</span><span class="token punctuation">.</span><span class="token function">Component</span><span class="token punctuation">(</span>    modules <span class="token operator">=</span> <span class="token punctuation">[</span>AndroidInjectionModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 引入框架提供的InjectionModule</span>        AndroidSupportInjectionModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 如果使用了support相关的类，也需要引入</span>        MainActivityModule<span class="token operator">::</span><span class="token keyword">class</span> <span class="token comment" spellcheck="true">// 这是我们自定义的Module</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> AppComponent <span class="token operator">:</span> AndroidInjector<span class="token operator">&lt;</span>MyApplication<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token label symbol">@dagger</span><span class="token punctuation">.</span>Component<span class="token punctuation">.</span>Factory    <span class="token keyword">interface</span> Factory <span class="token operator">:</span> AndroidInjector<span class="token punctuation">.</span>Factory<span class="token operator">&lt;</span>MyApplication<span class="token operator">></span><span class="token punctuation">}</span></code></pre><p>我们需要将我们在<code>MainActivity</code>中的<code>MainActivityModule</code>加入到<code>Application</code>中的<code>AppComponent</code>的<code>module</code>,然后<code>Make Project</code>或<code>Make App</code>或<code>build project</code>，如果未报错即成功。</p><h3 id="简洁写法"><a href="#简洁写法" class="headerlink" title="简洁写法"></a>简洁写法</h3><p>如果相应的<code>ActivityComponent</code>中只有以下操作时：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@ActivityScope</span><span class="token annotation builtin">@Subcomponent</span><span class="token keyword">interface</span> MainActivityComponent <span class="token operator">:</span> AndroidInjector<span class="token operator">&lt;</span>MainActivity<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明MainActivity创建的工厂接口</span>    <span class="token label symbol">@dagger</span><span class="token punctuation">.</span>Subcomponent<span class="token punctuation">.</span>Factory    <span class="token keyword">interface</span> Factory <span class="token operator">:</span> AndroidInjector<span class="token punctuation">.</span>Factory<span class="token operator">&lt;</span>MainActivity<span class="token operator">></span><span class="token punctuation">}</span></code></pre><p>我们可以新建一个module类， 将满足以上条件的Component 集中到一起，并删除对应的Component，如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Module</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> ActivityBindingModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@ActivityScoped</span>    <span class="token annotation builtin">@ContributesAndroidInjector</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>MainActivityModule<span class="token punctuation">.</span>class<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">mainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> MainActivity    <span class="token annotation builtin">@ActivityScoped</span>    <span class="token annotation builtin">@ContributesAndroidInjector</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>AddEditTaskModule<span class="token punctuation">.</span>class<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">addEditTaskActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AddEditTaskActivity <span class="token punctuation">}</span></code></pre><p>删除 原有module中的<code>bind*</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivityModule</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="注入Fragment"><a href="#注入Fragment" class="headerlink" title="注入Fragment"></a>注入Fragment</h2><p>注入<code>Fragment</code>与注入<code>Activity</code>类似，唯一不同的地方在于我们需要在<code>onAttach</code>方法中执行<code>AndroidSupportInject.inject(this)</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> BlankFragment <span class="token operator">:</span> <span class="token function">Fragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AndroidSupportInjection<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token label symbol">@dagger</span><span class="token punctuation">.</span>Module<span class="token keyword">abstract</span> <span class="token keyword">class</span> FragmentBindModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@ContributesAndroidInjector</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">blankFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BlankFragment<span class="token punctuation">}</span><span class="token label symbol">@dagger</span><span class="token punctuation">.</span><span class="token function">Component</span><span class="token punctuation">(</span>    modules <span class="token operator">=</span> <span class="token punctuation">[</span>AndroidInjectionModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>        AndroidSupportInjectionModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ActivityBinder<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>        FragmentBindModule<span class="token operator">::</span><span class="token keyword">class</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> AppComponent <span class="token operator">:</span> AndroidInjector<span class="token operator">&lt;</span>MyApplication<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token label symbol">@dagger</span><span class="token punctuation">.</span>Component<span class="token punctuation">.</span>Factory    <span class="token keyword">interface</span> Factory <span class="token operator">:</span> AndroidInjector<span class="token punctuation">.</span>Factory<span class="token operator">&lt;</span>MyApplication<span class="token operator">></span><span class="token punctuation">}</span></code></pre><p>对于<code>FragmentBindModule</code>不仅可以放入到<code>AppComponent</code>中，也可以放入到<code>MainActivityComponent</code>,或者<code>FragmentComponent</code>如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token label symbol">@dagger</span><span class="token punctuation">.</span><span class="token function">Subcomponent</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>FragmentBindModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> MainActivityComponent <span class="token operator">:</span> AndroidInjector<span class="token operator">&lt;</span>MainActivity<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token label symbol">@dagger</span><span class="token punctuation">.</span>Subcomponent<span class="token punctuation">.</span>Factory    <span class="token keyword">interface</span> Factory<span class="token operator">:</span> AndroidInjector<span class="token punctuation">.</span>Factory<span class="token operator">&lt;</span>MainActivity<span class="token operator">></span><span class="token punctuation">}</span><span class="token label symbol">@dagger</span><span class="token punctuation">.</span><span class="token function">Module</span><span class="token punctuation">(</span>subcomponents <span class="token operator">=</span> <span class="token punctuation">[</span>    MainActivityComponent<span class="token operator">::</span><span class="token keyword">class</span> <span class="token comment" spellcheck="true">// 将fragment放入到了activity对应的Component</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> MainActivityModule<span class="token punctuation">{</span>    <span class="token annotation builtin">@Binds</span>    <span class="token annotation builtin">@IntoMap</span>    <span class="token annotation builtin">@ClassKey</span><span class="token punctuation">(</span>MainActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">bind</span><span class="token punctuation">(</span>factory<span class="token operator">:</span>MainActivityComponent<span class="token punctuation">.</span>Factory<span class="token punctuation">)</span><span class="token operator">:</span>AndroidInjector<span class="token punctuation">.</span>Factory<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">}</span></code></pre><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="Model-注解的是抽象类时-provides-标注的必须是静态方法"><a href="#Model-注解的是抽象类时-provides-标注的必须是静态方法" class="headerlink" title="@Model  注解的是抽象类时  @provides 标注的必须是静态方法"></a>@Model  注解的是抽象类时  @provides 标注的必须是静态方法</h3><blockquote><p> A @Module may not contain both non-static @Provides methods and abstract @Binds or @Multibinds declarations</p></blockquote><p>这个错误提示是将<code>Module</code>定义成了抽象类，这在<code>java</code>中只需要将<code>@Provide</code>标注的方法设置为静态方法即可，但是在<code>Kotlin</code>中是行不通的，因为在<code>kotlin</code>中静态方法是写在<code>companion object</code>代码块内，所以解决方法有两种：</p><ul><li><p>用<code>Module</code>标注<code>companion object</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token label symbol">@dagger</span><span class="token punctuation">.</span>Module<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token function">MainActivityModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token label symbol">@dagger</span><span class="token punctuation">.</span>Module    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token annotation builtin">@JvmStatic</span>        <span class="token annotation builtin">@Provides</span>        <span class="token keyword">fun</span> <span class="token function">provideFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">BlankFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Binds</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">context</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> MainActivity<span class="token punctuation">)</span><span class="token operator">:</span> Context<span class="token punctuation">}</span></code></pre></li><li><p>使用多个<code>Module</code>将抽象方法和<code>@provide</code>标注的方法分开，如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Module</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> MainActivityBindsModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Binds</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">context</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> MainActivity<span class="token punctuation">)</span><span class="token operator">:</span> Context<span class="token punctuation">}</span><span class="token annotation builtin">@Module</span><span class="token punctuation">(</span>includes <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>MainActivityBindsModule <span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> MainActivityProvidesModule <span class="token punctuation">{</span>      <span class="token annotation builtin">@Provides</span>      <span class="token keyword">fun</span> <span class="token function">provideFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">BlankFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过前面的例子我们亦可以看出：</p><ol><li>Dagger2-android 使用的是Dagger2中的<strong>继承关系</strong>；</li><li>使用它，我们就可以不用写那么多的模版代码，相对于<code>Dagger2</code>方便了许多；</li><li>Dagger2-Android 比Dagger2更强大，我们使用<code>@Binds</code>绑定抽象方法来注入一些提供初始化的类等。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> dagger2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Dagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepin日常使用</title>
      <link href="/posts/a02aa504/"/>
      <url>/posts/a02aa504/</url>
      
        <content type="html"><![CDATA[<p><strong>持续更新中………………</strong></p><p>使用深度的<code>deepin</code>的<code>linux</code>发行版系统已经半年有余，对于一个开发者来说，日常使用基本满足并且开发的效率和编译的程序的效率相对于<code>win10</code>高很多，但是呢也会有一些小问题，下面是我刚接触到这个系统时遇到的一些，然后通过查找资料和实践做的一些笔记吧，这篇很不定时更新。</p><a id="more"></a><h1 id="添加自定义程序到程序列表"><a href="#添加自定义程序到程序列表" class="headerlink" title="添加自定义程序到程序列表"></a>添加自定义程序到程序列表</h1><p>自己下载的软件包，如何将程序加入程序列表中，以<code>Typora</code>为例：</p><ol><li><p>将从官网下载的typora安装包：<code>Typora-linux-x64.tar.gz</code>，解压到相应的目录(目录自定义)，如：/home/**/App/typora</p></li><li><p>创建<code>typora.desktop</code></p><pre class=" language-shell"><code class="language-shell">[Desktop Entry]Version=0.9.71Type=ApplicationName=TyporaComment=a markdown editorIcon=/home/xw/App/typora/typora.pngExec=/home/xw/App/typora/Typora %FCategories=TextEditor;Terminal=falseStartupNotify=falseMimeType=text/english;text/plain;</code></pre></li><li><p>在控制台中，执行<code>cp</code>命令，将<code>typora.desktop</code>放入到<code>/usr/share/applications/</code>下，此处需要<code>su</code>权限</p></li></ol><p><strong>注意：</strong> 需要给可执行文件添加可执行权限: <code>sudo chmod u+x xxx.sh(appImage)</code></p><h1 id="修改标题栏"><a href="#修改标题栏" class="headerlink" title="修改标题栏"></a>修改标题栏</h1><pre class=" language-shell"><code class="language-shell">From dde-kwin 0.0.11 version, you can config the titlebar height by create a config file at (please create the path if the path is not existed):# If you use light theme~/.local/share/deepin/themes/deepin/light/titlebar.ini# If you use dark theme~/.local/share/deepin/themes/deepin/dark/titlebar.iniand put the following content in the config file (replace 25 with the height you want):[Active]height=25[Inactive]height=25</code></pre><h1 id="JAVA-JDK安装"><a href="#JAVA-JDK安装" class="headerlink" title="JAVA JDK安装"></a>JAVA JDK安装</h1><p>地址： <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk下载</a></p><p>用户名： <a href="mailto:2696671285@qq.com">2696671285@qq.com</a></p><p>密码： Oracle123</p><h1 id="添加Java和Android-SDK环境变量"><a href="#添加Java和Android-SDK环境变量" class="headerlink" title="添加Java和Android SDK环境变量"></a>添加Java和Android SDK环境变量</h1><pre class=" language-shell"><code class="language-shell">#jdkexport JAVA_HOME=/home/xw/App/jdk1.8.0_211export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH# androidexport ANDROID_HOME=/home/xw/App/android/sdkexport ANDROID_NDK=/home/xw/App/android/sdk/ndk-bundleexport PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_NDK:$PATH</code></pre><h1 id="Linux-代理"><a href="#Linux-代理" class="headerlink" title="Linux 代理"></a>Linux 代理</h1><h2 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h2><ul><li>安装<code>proxychains</code></li></ul><pre class=" language-shell"><code class="language-shell">  sudo apt install proxychains</code></pre><ul><li><p>配置</p><p>安装完成之后在<code>proxychains.conf</code>下：</p></li></ul><pre class=" language-shell"><code class="language-shell">  vim /etc/proxychains.conf</code></pre><p> <code>socks5 127.0.0.1 1080</code> 如果有别的比如<code>socks4 127.0.0.1 9050</code> 那么就把它给注释掉</p><ul><li>使用  </li></ul><p>如果你只是给一个命令实现代理,比如你要git clone什么东西,你只要在这个命令前面加上 <code>proxychains</code>这个命令就好,比如</p><pre class=" language-shell"><code class="language-shell">proxychains git clone https://github.com/haad/proxychains.git</code></pre><h2 id="系统代理生成pac文件"><a href="#系统代理生成pac文件" class="headerlink" title="系统代理生成pac文件"></a>系统代理生成<code>pac</code>文件</h2><pre class=" language-shell"><code class="language-shell">sudo apt install python3-pipsudo pip3 install genpacproxychains4 genpac --pac-compress --pac-proxy 'SOCKS5 127.0.0.1:1080' --format pac  -o ~/auto.pacfile:///home/登录用户名/auto.pac</code></pre><h2 id="Chrome设置代理"><a href="#Chrome设置代理" class="headerlink" title="Chrome设置代理"></a>Chrome设置代理</h2><ol><li><p>安装<code>SwitchyOmega</code></p><ol><li>情景模式 <code>proxy  socks5 127.0.0.1 1080</code></li><li><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">auto switch 规则地址</a></li></ol></li><li><p>浏览器<code>google-chrome.desktop</code>设置</p><pre class=" language-shell"><code class="language-shell">Exec=/usr/bin/google-chrome-stable %U  --proxy-server=socks5://127.0.0.1:1080</code></pre></li></ol><h1 id="Git相关"><a href="#Git相关" class="headerlink" title="Git相关"></a>Git相关</h1><h2 id="终端-git项目路径下显示git-分支"><a href="#终端-git项目路径下显示git-分支" class="headerlink" title="终端 git项目路径下显示git 分支"></a>终端 git项目路径下显示git 分支</h2><ol><li><code>Ctrl + Alt+ T</code>打开终端</li><li><code>vim ~/.bashrc</code></li></ol><p>文件末尾添加：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#show the current git branch </span>find_git_branch <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       local dir<span class="token operator">=</span>. <span class="token function">head</span>    <span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$dir</span>"</span> -ef / <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token string">"<span class="token variable">$dir</span>/.git/HEAD"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        head<span class="token operator">=</span><span class="token punctuation">$(</span><span class="token operator">&lt;</span> <span class="token string">"<span class="token variable">$dir</span>/.git/HEAD"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$head</span> <span class="token operator">=</span> ref:\ refs/heads/* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            git_branch<span class="token operator">=</span><span class="token string">"(*<span class="token variable">${head#*/*/}</span>)"</span>        <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$head</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            git_branch<span class="token operator">=</span><span class="token string">"(*(detached))"</span>              <span class="token keyword">else</span>               git_branch<span class="token operator">=</span><span class="token string">"(*(unknow))"</span>           <span class="token keyword">fi</span>              <span class="token keyword">return</span>        <span class="token keyword">fi</span>              dir<span class="token operator">=</span><span class="token string">"../<span class="token variable">$dir</span>"</span>       <span class="token keyword">done</span>       git_branch<span class="token operator">=</span><span class="token string">''</span>  <span class="token punctuation">}</span>PROMPT_COMMAND<span class="token operator">=</span><span class="token string">"find_git_branch; <span class="token variable">$PROMPT_COMMAND</span>"</span>PS1<span class="token operator">=</span><span class="token string">"\u@\h:\w\[\033[0;32m\]\<span class="token variable">$git_branch</span>\[\033[0m\] \$ "</span></code></pre><p> <strong>tips</strong>:</p><p>vim 编辑模式下粘贴上述代码会出现格式缩进看着非常乱，所以在粘贴前在vim中执行</p><pre class=" language-shell"><code class="language-shell">:set paste</code></pre><h2 id="git-避免多次输入密码"><a href="#git-避免多次输入密码" class="headerlink" title="git 避免多次输入密码"></a>git 避免多次输入密码</h2><pre class=" language-shell"><code class="language-shell">git config --global credential.helper store</code></pre><p>输入完成后可以看到<code>~/.gitconfig</code>文件中</p><pre class=" language-shell"><code class="language-shell">credential]    helper = store</code></pre><p>然后提交的时候还需要输入一次密码，之后就不需要了。</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><pre class=" language-git"><code class="language-git">error: insufficient permission for adding an object to repository database ./objects</code></pre><p>出现此错误是因为<code>git</code>库权限的问题</p><pre class=" language-shell"><code class="language-shell">ls -al 查看git库的所有者</code></pre><p>解决：</p><p>使用root进入.git所在的文件路径,将权限重新赋给git库拥有者</p><pre class=" language-shell"><code class="language-shell">sudo chown -R <username> .git/*</code></pre><p><code>&lt;username&gt;</code>可以通过 <code>whoami</code> 进行查看</p><h2 id="Github-添加ssh"><a href="#Github-添加ssh" class="headerlink" title="Github 添加ssh"></a>Github 添加ssh</h2><h4 id="1、首先需要检查你电脑是否已经有-SSH-key"><a href="#1、首先需要检查你电脑是否已经有-SSH-key" class="headerlink" title="1、首先需要检查你电脑是否已经有 SSH key"></a>1、首先需要检查你电脑是否已经有 SSH key</h4><p>运行 终端（Alt + Ctrl+ T），输入如下代码：</p><pre class=" language-shell"><code class="language-shell">$ cd ~/.ssh$ ls</code></pre><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。</p><h4 id="2、创建一个-SSH-key"><a href="#2、创建一个-SSH-key" class="headerlink" title="2、创建一个 SSH key"></a>2、创建一个 SSH key</h4><pre><code>$ ssh-keygen -t rsa -C "your_email@example.com"</code></pre><p>代码参数含义：</p><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p><p>输入完上述命令后一直回车即可，然后就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p><h4 id="3、添加你的-SSH-key-到-github上面去"><a href="#3、添加你的-SSH-key-到-github上面去" class="headerlink" title="3、添加你的 SSH key 到 github上面去"></a>3、添加你的 SSH key 到 github上面去</h4><p>a、首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p><pre><code>$ cat ~/.ssh/id_rsa.pub</code></pre><p>b、登录你的github账号，从又上角的设置（ <a href="https://github.com/settings" target="_blank" rel="noopener">Account Settings</a> ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。</p><p>c、点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。</p><h3 id="4、测试一下该SSH-key"><a href="#4、测试一下该SSH-key" class="headerlink" title="4、测试一下该SSH key"></a>4、测试一下该SSH key</h3><p>在git Bash 中输入以下代码</p><pre><code>$ ssh -T git@github.com</code></pre><p>当你输入以上代码时，会有一段警告代码，如：</p><pre><code>The authenticity of host 'github.com (207.97.227.239)' can't be established.# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.# Are you sure you want to continue connecting (yes/no)?</code></pre><p>这是正常的，你输入 yes 回车既可,如果出现：</p><pre><code>Hi username! You've successfully authenticated, but GitHub does not# provide shell access.</code></pre><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p><h1 id="PlayOnLinux-中文支持"><a href="#PlayOnLinux-中文支持" class="headerlink" title="PlayOnLinux 中文支持"></a>PlayOnLinux 中文支持</h1><ol><li><p>从<code>windows</code>字体目录中复制<code>simsun.ttc</code>到<code>＂XXXX/drive_c/windows/Fonts＂</code>和<code>＂/usr/share/fonts/truetype/msfonts＂</code>这两个目录下面（<code>msfonts</code>为自己建立的目录）</p></li><li><p>修改Wine的注册表</p><ol><li><p>定位到<code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes</code>, 将  <code>MS Shell Dlg</code> 及 <code>MS Shell Dlg 2</code> 的值数据修改为<code>simsun</code></p></li><li><p>定位到 <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Fonts</code>, 新建字符串项: <code>simsun (TrueType)</code>，修改此值数据为 <code>z:\usr\share\fonts\truetype\msfonts\simsun.ttc</code></p></li></ol></li></ol><h1 id="XMIND-ZEN-激活"><a href="#XMIND-ZEN-激活" class="headerlink" title="XMIND-ZEN 激活"></a>XMIND-ZEN 激活</h1><ol><li>地址：<a href="https://github.com/exrock/xmind_zen_cracker" target="_blank" rel="noopener">激活地址</a></li><li>按照README操作即可</li></ol><p>tips: 最好使用npm 不要使用代理，不然会报 <code>ref@1.3.5 install: node-gyp rebuild</code>错误</p><h1 id="进入tty"><a href="#进入tty" class="headerlink" title="进入tty"></a>进入tty</h1><p>当遇到桌面卡死的时候，我们可以通过tty进入命令行界面，然后重启系统，这样避免了强制关机等等操作；</p><p>进入命令：<code>ctrl + alt</code>+ F1 到F7 都可以进入</p><p>退出命令： 输入用户名密码登录成功后，输入<code>exit</code>回车即可。</p><h1 id="安装软件缺少依赖问题解决"><a href="#安装软件缺少依赖问题解决" class="headerlink" title="安装软件缺少依赖问题解决"></a>安装软件缺少依赖问题解决</h1><pre class=" language-shell"><code class="language-shell">sudo apt-get --fix-broken install</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepin </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dagger 2 Component 与 SubComponent</title>
      <link href="/posts/e30bee8a/"/>
      <url>/posts/e30bee8a/</url>
      
        <content type="html"><![CDATA[<h1 id="Dagger-2-Component-与-SubComponent"><a href="#Dagger-2-Component-与-SubComponent" class="headerlink" title="Dagger 2 Component 与 SubComponent"></a>Dagger 2 Component 与 SubComponent</h1><hr><p><a href="/posts/cbb172f8">Dagger 2 完全解析（一）,基本使用与原理</a><br><a href="/posts/b74c4b6c">Dagger 2 完全解析（二）, 进阶使用</a><br><a href="/posts/e30bee8a">Dagger 2 完全解析（三）,  Component 与 SubComponent</a><br><a href="/posts/e781e647">Dagger 2 完全解析（四）,在Android中的使用</a></p><blockquote><p>本系列文章是基于 Google Dagger 2.23.2 版本， Kotlin 1.3.21版本</p></blockquote><hr><p>理解前面两篇文章后，可以使用 <code>Dagger 2</code>框架完成一个对象的依赖注入。但是在实战中会存在多个需要注入依赖的对象，也就是说会有多个 <code>Component</code>，它们之间会有相同的依赖，那么该如何处理它们之间的关系呢？</p><p>我们先来看一个简单的例子：</p><p>假如有三个类：<code>A</code>、<code>B</code>和<code>C</code>, <code>A</code>和<code>B</code>都各自持有<code>C</code>的实例，并且通过<code>Dagger2</code>进行注入</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> c<span class="token operator">:</span> C<span class="token punctuation">}</span><span class="token keyword">class</span> B <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> c<span class="token operator">:</span> C<span class="token punctuation">}</span><span class="token keyword">class</span> C <span class="token annotation builtin">@Inject</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Component:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token keyword">interface</span> AComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Component</span><span class="token keyword">interface</span> BComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>b<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果要让<code>A</code>、<code>B</code>持有的实例<code>C</code>相同的话，我们该如何处理？</p><p>很多人第一时间会想到下面这种设计：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Singleton</span><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>CModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> AComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Singleton</span><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>CModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> BComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>b<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> CModule <span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> c<span class="token operator">:</span> C<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Singleton</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> C <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token operator">!!</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>把 Component 需要的依赖都在<code>modules</code>属性中声明，但是这样有两个问题：</p><p>（1）有时依赖实例需要共享，例如上面场景中，<code>A</code>和<code>C</code>都持有<code>C</code>的实例，并且根据<code>Module</code>里的实现，会存在谁先创建<code>C</code>实例的问题。</p><p>（2）Scope 作用域容易失效，例如 <code>CModule</code> 的<code>provideCar()</code>使用 <code>@Singleton</code> 作用域，<code>AComponent</code>和<code>BComponent</code>也要用 <code>Singleton</code> 标注，但它们都会持有一个<code>C</code>实例。</p><p>假如<code>A</code>先创建了<code>C</code>那么，<code>BComponent</code>需要依赖 <code>AComponent</code>提供的 <code>C</code>实例，这就是 <code>Component</code> 组织关系中的一种。</p><h2 id="Component-的组织关系"><a href="#Component-的组织关系" class="headerlink" title="Component 的组织关系"></a>Component 的组织关系</h2><p>Component 管理着依赖实例，根据依赖实例之间的关系就能确定 Component 的关系。这些关系可以用<code>object graph</code>描述，我称之为依赖关系图。在 Dagger 2 中 Component 的组织关系分为两种：</p><ul><li>依赖关系，一个 Component 依赖其他 Compoent<code>公开</code>的依赖实例，用 Component 中的<code>dependencies</code>声明。</li><li>继承关系，一个 Component 继承（也可以叫扩展）某 Component 提供更多的依赖，SubComponent 就是继承关系的体现。</li></ul><p>所以前文中<code>AComponent</code>和<code>BComponent</code>是依赖关系。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>具体的实现代码：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>CModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> AComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> C<span class="token punctuation">}</span><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>dependencies <span class="token operator">=</span> <span class="token punctuation">[</span>AComponent<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> BComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>b<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> CModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> C <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>注</strong>：<strong>因为 BComponent和 AComponent是依赖关系，如果<code>AComponent</code>声明了作用域的话，那么<code>BComponent</code>也必须声明（反之可以），而且它们的 Scope 不能相同，并且两个都有作用域的情况下 @Singleton 修饰的 Component （BComponent）不能依赖其他的 Component。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerBComponent</span> <span class="token keyword">implements</span> <span class="token class-name">BComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> AComponent aComponent<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">DaggerBComponent</span><span class="token punctuation">(</span>AComponent aComponentParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>aComponent <span class="token operator">=</span> aComponentParam<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectA</span><span class="token punctuation">(</span>B b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectB</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> B <span class="token function">injectB</span><span class="token punctuation">(</span>B instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 注入时，使用了aComponent.c()</span>    B_MembersInjector<span class="token punctuation">.</span><span class="token function">injectC</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>aComponent<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Cannot return null from a non-@Nullable component method"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>编译时生成的代码 DaggerBComponent 中会调用<code>aComponent.c()</code>，如果 AComponent 没有向外提供C 实例的接口的话，DaggerBComponent 就会注入失败。</p><p>依赖注入：</p><pre><code>val aComponent = DaggerAComponent.builder().build()DaggerBComponent.builder().aComponent(aComponent).build().inject(b)</code></pre><p>依赖关系就跟生活中的朋友关系相当，注意事项如下：</p><ol><li>被依赖的 Component 需要把暴露的依赖实例用显式的接口声明。</li><li>依赖关系中的 Component 的 Scope 不能相同，因为它们的生命周期不同。</li></ol><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><p>继承关系跟面向对象中的继承的概念有点像，<code>SubComponent</code>称为<code>子 Component</code>，类似于平常说的子类。下面先看看下面这个场景：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Parent <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> car<span class="token operator">:</span> Car<span class="token punctuation">}</span><span class="token keyword">class</span> Child <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> car<span class="token operator">:</span> Car    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> bike<span class="token operator">:</span> Bike<span class="token punctuation">}</span><span class="token keyword">class</span> Car <span class="token annotation builtin">@Inject</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> Bike <span class="token annotation builtin">@Inject</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Child 可以开Parent的车 car，也可以骑自己的自行车 bike。依赖关系图：</p><p><img src="/assets/image/1561371949435.png" alt="1561371949435"></p><p>上图中 ChildComponent 在 ParentComponent之中，ChildComponent子承父业，可以访问 ParentComponent 的依赖，而 ParentComponent只知道 ChildComponent 是它的子类，可以访问 SubComponent.Builder，却无法访问 SubComponent 中的依赖。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>CarModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> ParentComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">inject</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> Parent<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Subcomponent</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>BikeModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> ChildComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">inject</span><span class="token punctuation">(</span>child<span class="token operator">:</span> Child<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// SubComponent 必须显式地声明 Subcomponent.Builder，parentComponent 需要用 Builder 来创建 ChildComponent</span>    <span class="token annotation builtin">@Subcomponent</span><span class="token punctuation">.</span>Builder    <span class="token keyword">interface</span> Builder <span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ChildComponent    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@SubComponent</code>的写法与<code>@Component</code>一样，只能标注接口或抽象类，与依赖关系一样，SubComponent 与 parent Component 的 Scope 不能相同，只是 SubComponent 表明它是继承扩展某 Component 的。怎么表明一个 SubComponent 是属于哪个 parent Component 的呢？只需要在 parent Component 依赖的 Module 中的<code>subcomponents</code>加上 SubComponent 的 class，然后就可以在 parent Component 中请求 SubComponent.Builder。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>CarModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> ParentComponent <span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 用来创建childComponent</span>    <span class="token keyword">fun</span> <span class="token function">childComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ChildComponent<span class="token punctuation">.</span>Builder<span class="token punctuation">}</span><span class="token annotation builtin">@Subcomponent</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>BikeModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> ChildComponent <span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// SubComponent 必须显式地声明 Subcomponent.Builder，parentComponent 需要用 Builder 来创建 ChildComponent</span>    <span class="token annotation builtin">@Subcomponent</span><span class="token punctuation">.</span>Builder    <span class="token keyword">interface</span> Builder <span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ChildComponent    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在CarModule上添加subComponents</span><span class="token annotation builtin">@Module</span><span class="token punctuation">(</span>subcomponents <span class="token operator">=</span> <span class="token punctuation">[</span>ChildComponent<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> CarModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> BikeModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上面的代码经过<code>make project</code>后，dagger2生成的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerParentComponent</span> <span class="token keyword">implements</span> <span class="token class-name">ParentComponent</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> ChildComponent<span class="token punctuation">.</span>Builder <span class="token function">childComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChildComponentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ChildComponentBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">ChildComponent<span class="token punctuation">.</span>Builder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ChildComponent <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChildComponentImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BikeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ChildComponentImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ChildComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BikeModule bikeModule<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">ChildComponentImpl</span><span class="token punctuation">(</span>BikeModule bikeModuleParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bikeModule <span class="token operator">=</span> bikeModuleParam<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> Child <span class="token function">injectChild</span><span class="token punctuation">(</span>Child instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 注入car时，调用的parentComponent的carModule提供</span>      Child_MembersInjector<span class="token punctuation">.</span><span class="token function">injectCar</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> CarModule_ProvideCarFactory<span class="token punctuation">.</span><span class="token function">provideCar</span><span class="token punctuation">(</span>DaggerParentComponent<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>carModule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Child_MembersInjector<span class="token punctuation">.</span><span class="token function">injectBike</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> BikeModule_ProvideBikeFactory<span class="token punctuation">.</span><span class="token function">provideBike</span><span class="token punctuation">(</span>bikeModule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SubComponent 编译时不会生成 DaggerChildComponent，需要通过 parentComponent 的获取 SubComponent.Builder 方法获取 ChildComponent 实例。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> parentComponent <span class="token operator">=</span> DaggerParentComponent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>parentComponent<span class="token punctuation">.</span><span class="token function">childComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span></code></pre><p><strong>继承关系和依赖关系最大的区别就是：继承关系中不用显式地提供依赖实例的接口，SubComponent 继承 parent Component 的所有依赖。</strong></p><h3 id="依赖关系-vs-继承关系"><a href="#依赖关系-vs-继承关系" class="headerlink" title="依赖关系 vs 继承关系"></a>依赖关系 vs 继承关系</h3><p>相同点：</p><ul><li>两者都能复用其他 Component 的依赖</li><li>有依赖关系和继承关系的 Component 不能有相同的 Scope</li></ul><p>区别：</p><ul><li>依赖关系中被依赖的 Component 必须显式地提供公开依赖实例的接口，而 SubComponent 默认继承 parent Component 的依赖。</li><li>依赖关系会生成两个独立的 DaggerXXComponent 类，而 SubComponent 不会生成 独立的 DaggerXXComponent 类。</li></ul><p>在 Android 开发中，Activity 是 App 运行中组件，Fragment 又是 Activity 一部分，这种组件化思想适合继承关系，所以在 Android 中一般使用 SubComponent。</p><h2 id="SubComponent-的其他问题"><a href="#SubComponent-的其他问题" class="headerlink" title="SubComponent 的其他问题"></a>SubComponent 的其他问题</h2><h3 id="抽象工厂方法定义继承关系"><a href="#抽象工厂方法定义继承关系" class="headerlink" title="抽象工厂方法定义继承关系"></a>抽象工厂方法定义继承关系</h3><p>除了使用 Module 的<code>subcomponents</code>属性定义继承关系，还可以在 parent Component 中声明返回 SubComponent 的抽象工厂方法来定义：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>CarModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> ParentComponent <span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 用来创建childComponent</span>    <span class="token comment" spellcheck="true">//// 这个抽象工厂方法表明 ChildComponent 继承 ParentComponent</span>    <span class="token keyword">fun</span> <span class="token function">childComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ChildComponent<span class="token punctuation">}</span><span class="token annotation builtin">@Subcomponent</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>BikeModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> ChildComponent <span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> CarModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> BikeModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这种定义方式不能很明显地表明继承关系，一般推荐使用 Module 的<code>subcomponents</code>属性定义。</p><h3 id="重复的-Module"><a href="#重复的-Module" class="headerlink" title="重复的 Module"></a>重复的 Module</h3><p>当相同的 Module 注入到 parent Component 和它的 SubComponent 中时，则每个 Component 都将自动使用这个 Module 的同一实例。也就是如果在 SubComponent.Builder 中调用相同的 Module 或者在返回 SubComponent 的抽象工厂方法中以重复 Module 作为参数时，会出现错误。（前者在编译时不能检测出，是运行时错误）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>RepeatedModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">ComponentOne</span> <span class="token punctuation">{</span>  ComponentTwo <span class="token function">componentTwo</span><span class="token punctuation">(</span>RepeatedModule repeatedModule<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译时报错</span>  ComponentThree<span class="token punctuation">.</span>Builder <span class="token function">componentThreeBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Subcomponent</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>RepeatedModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">ComponentTwo</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token annotation punctuation">@Subcomponent</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">{</span>RepeatedModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">ComponentThree</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Subcomponent</span><span class="token punctuation">.</span>Builder  <span class="token keyword">interface</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    Builder <span class="token function">repeatedModule</span><span class="token punctuation">(</span>RepeatedModule repeatedModule<span class="token punctuation">)</span><span class="token punctuation">;</span>    ComponentThree <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>DaggerComponentOne<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">componentThreeBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">repeatedModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RepeatedModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 运行时报错 UnsupportedOperationException!</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Component 之间共用相同依赖，可以有两种组织关系：依赖关系与继承关系。至于如何选择试具体情况而定，但在 Android 开发中，一般使用继承关系，以 AppComponent 作为 root Component，AppComponent 一般还会使用 @Singleton 作用域，而 ActivityComponent 为 SubComponent。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> dagger2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Dagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dagger 2 的基本使用与原理</title>
      <link href="/posts/cbb172f8/"/>
      <url>/posts/cbb172f8/</url>
      
        <content type="html"><![CDATA[<h1 id="Dagger-2-的基本使用与原理"><a href="#Dagger-2-的基本使用与原理" class="headerlink" title="Dagger 2 的基本使用与原理"></a>Dagger 2 的基本使用与原理</h1><hr><p><a href="/posts/cbb172f8">Dagger 2 完全解析（一）,基本使用与原理</a><br><a href="/posts/b74c4b6c">Dagger 2 完全解析（二）, 进阶使用</a><br><a href="/posts/e30bee8a">Dagger 2 完全解析（三）,  Component 与 SubComponent</a><br><a href="/posts/e781e647">Dagger 2 完全解析（四）,在Android中的使用</a></p><blockquote><p>本系列文章是基于 Google Dagger 2.23.2 版本， Kotlin 1.3.21版本</p></blockquote><hr><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="什么是依赖"><a href="#什么是依赖" class="headerlink" title="什么是依赖"></a>什么是依赖</h3><blockquote><p><strong>依赖(Dependency)</strong> 是类与类之间的联接。依赖关系表示一个类依赖于另一个类的定义, 一般而言，依赖关系在语言中体现为局部变量、方法的形参，或者对静态方法的调用。 </p></blockquote><p>我们在<code>Android</code>开发中 经常会在<code>build.gradle</code>中引入第三方包的依赖包，然后就完成了对第三方的依赖。那么到底什么是依赖呢？下面我举个例子：</p><p>假如有两个<code>类</code> : <code>A</code>和<code>B</code>, <code>A</code>中持有<code>B</code>的实例，则可认为 <code>A</code>依赖<code>B</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// Class A</span><span class="token keyword">class</span> <span class="token function">A</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> b<span class="token operator">:</span> B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// A中定义了b,并创建了B实例</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Class B</span><span class="token keyword">class</span> B</code></pre><p>上面这种写法是最常见的写法，但是在下面几个场景中存在一些问题：</p><ol><li>如果要修改 <code>B</code> 的构造函数，例如需要使用<code>b= B(name)</code>的方式构造时，还要修改 <code>A</code>的代码；</li><li>不利于单元测试，如单元测试中使用 mock 的 <code>B</code>测试<code>A</code> 。</li></ol><h3 id="什么是依赖注入-Dependency-Injection"><a href="#什么是依赖注入-Dependency-Injection" class="headerlink" title="什么是依赖注入(Dependency Injection)"></a>什么是依赖注入(Dependency Injection)</h3><p><strong>依赖注入</strong>（简称 DI）是用于实现<strong>控制反转</strong>（ <code>IOC</code>）最常见的方式之一，<code>IOC</code>是面向对象编程中的一种设计思想，用以降低代码之间耦合度。控制反转的基本思想是：借助“第三方”实现具有依赖关系的对象之间的解耦。</p><p>就拿上面的例子来说，我们在<code>A</code>中创建并持有<code>B</code>的实例，<code>A</code>依赖<code>B</code> ，并且创建的主动权在<code>A</code>, 实现了 Ioc 后，对象 <code>A</code> 依赖于<code>IOC</code> 容器，对象 A 被动地接受容器提供的对象 B 实例，由主动变为被动，因此称为控制反转。</p><p><strong>注意，控制反转不等同于依赖注入，控制反转还有一种实现方式叫“依赖查找”（Denpendency Lookup）</strong></p><p><strong>依赖注入</strong>就是将对象实例传入到一个对象中去（Denpendency injection means giving an object its instance variables）。依赖注入是一种设计模式，降低了依赖和被依赖对象之间的耦合，方便扩展和单元测试。</p><h3 id="依赖注入的实现方式"><a href="#依赖注入的实现方式" class="headerlink" title="依赖注入的实现方式"></a>依赖注入的实现方式</h3><p>其实在平常编码的过程中，已经不知觉地使用了依赖注入</p><ul><li>基于构造函数，在构造对象时注入所依赖的对象。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">A</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> b<span class="token operator">:</span> B <span class="token comment" spellcheck="true">// 由创建A 是 传入B的实例</span><span class="token punctuation">)</span></code></pre><ul><li>基于 set 方法，使用 setter 方法来让外部容器调用传入所依赖的对象。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> b<span class="token operator">:</span> B    <span class="token comment" spellcheck="true">// 通过外部调用setB()实现实例注入</span>    <span class="token keyword">fun</span> <span class="token function">setB</span><span class="token punctuation">(</span>b<span class="token operator">:</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>基于接口，使用接口来提供 setter 方法。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> BInjector <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectB</span><span class="token punctuation">(</span>b<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> A <span class="token operator">:</span> BInjector <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> b<span class="token operator">:</span> B<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">injectB</span><span class="token punctuation">(</span>b<span class="token operator">:</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>基于注解，Dagger 2 依赖注入框架就是使用<code>@Inject</code>完成注入。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> b<span class="token operator">:</span> B<span class="token punctuation">}</span></code></pre><h2 id="Dagger-2"><a href="#Dagger-2" class="headerlink" title="Dagger 2"></a>Dagger 2</h2><p><code>Dagger 2</code> 是 <code>Java</code> 和<code>Android</code>下的一个完全静态、编译时生成代码的依赖注入框架，由 Google 维护，早期的版本 <a href="https://github.com/square/dagger" target="_blank" rel="noopener">Dagger</a> 是由 Square 创建的。</p><p>Dagger 2 是基于 Java Specification Request(JSR) 330标准。利用 JSR 注解在编译时生成代码，来注入实例完成依赖注入。</p><p>下面是 Dagger 2 的一些资源地址：</p><p>Github：<a href="https://github.com/google/dagger" target="_blank" rel="noopener">https://github.com/google/dagger</a></p><p>官方文档：<a href="https://google.github.io/dagger//" target="_blank" rel="noopener">https://google.github.io/dagger//</a></p><p>API：<a href="http://google.github.io/dagger/api/latest/" target="_blank" rel="noopener">http://google.github.io/dagger/api/latest/</a></p><h2 id="Dagger-2-的基本使用"><a href="#Dagger-2-的基本使用" class="headerlink" title="Dagger 2 的基本使用"></a>Dagger 2 的基本使用</h2><p>上面介绍了依赖注入和 Dagger 2，下面由简单的示例开始一步一步地解析 Dagger 2 的基本使用与原理。</p><h3 id="引入-Dagger-2"><a href="#引入-Dagger-2" class="headerlink" title="引入 Dagger 2"></a>引入 Dagger 2</h3><p>在<code>build.gradle</code>中添加依赖和<code>plugin</code>：</p><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'kotlin-kapt'</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'com.google.dagger:dagger:2.23.2'</span>    kapt <span class="token string">'com.google.dagger:dagger-compiler:2.32.2'</span><span class="token punctuation">}</span></code></pre><p>如果 Android gradle plugin 的版本低于<code>2.2</code>，还需要引入 <a href="https://bitbucket.org/hvisser/android-apt" target="_blank" rel="noopener">android-apt</a> 插件。</p><h3 id="使用-Inject-标注需要注入的依赖"><a href="#使用-Inject-标注需要注入的依赖" class="headerlink" title="使用 @Inject 标注需要注入的依赖"></a>使用 @Inject 标注需要注入的依赖</h3><h4 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a><code>@Inject</code></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> javax<span class="token punctuation">.</span>inject<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> METHOD<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> FIELD <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Inject</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>继续使用上面 A 的例子：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> b<span class="token operator">:</span> B<span class="token punctuation">}</span></code></pre><p>使用<code>javax.inject.Inject</code>注解来标注需要 <code>Dagger 2</code> 注入的依赖，<code>make module</code>或者<code>build</code>后可以在<code>build/generated/source/kapt</code>目录下看到 Dagger 2 编译时生成的成员属性注入类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A_MembersInjector</span> <span class="token keyword">implements</span> <span class="token class-name">MembersInjector</span><span class="token operator">&lt;</span>A<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Provider<span class="token operator">&lt;</span>B<span class="token operator">></span> bProvider<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">A_MembersInjector</span><span class="token punctuation">(</span>Provider<span class="token operator">&lt;</span>B<span class="token operator">></span> bProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bProvider <span class="token operator">=</span> bProvider<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> MembersInjector<span class="token operator">&lt;</span>A<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>Provider<span class="token operator">&lt;</span>B<span class="token operator">></span> bProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A_MembersInjector</span><span class="token punctuation">(</span>bProvider<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectMembers</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> bProvider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">injectB</span><span class="token punctuation">(</span>A instance<span class="token punctuation">,</span> B b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    instance<span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面的<code>injectMembers</code>方法中可以看到注入依赖的代码是<code>instance.b= bProvider.get();</code>，所以<code>@Inject</code>标注的成员属性不能是<code>private</code>的，不然无法注入。<code>A</code>中<code>@Inject</code>注解了<code>n</code>不同的类型变量，那么<code>A_MembersInjector</code>就会持有<code>n</code>个<code>Provider</code>。</p><h3 id="创建所依赖对象的实例"><a href="#创建所依赖对象的实例" class="headerlink" title="创建所依赖对象的实例"></a>创建所依赖对象的实例</h3><p>用<code>@Inject</code>标注构造函数时，Dagger 2 会完成实例的创建。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> B <span class="token annotation builtin">@Inject</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>build 后可以在<code>build/generated/source/kapt</code>目录下看到 Dagger 2 编译时生成的工厂类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">B_Factory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token operator">&lt;</span>B<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> B_Factory INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B_Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> B <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> B_Factory <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> B <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>依赖注入是<code>依赖的对象实例</code>–&gt;<code>需要注入的实例属性</code>，上面完成两步，通过 Dagger 2 生成的代码代码可以知道，生成了 <code>A</code>的成员属性注入类和 <code>B</code>的工厂类，接下来需要的就是新建工厂实例并调用成员属性注入类完成 <code>B</code>的实例注入。完成这个过程的桥梁就是<code>dagger.Component</code>。</p><h3 id="Component-桥梁"><a href="#Component-桥梁" class="headerlink" title="Component 桥梁"></a>Component 桥梁</h3><p><code>@Component</code>可以标注接口或抽象类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span> <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>TYPE<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Documented</span>  @<span class="token keyword">interface</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>TYPE<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Documented</span>  @<span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Component</code>可以完成依赖注入过程，其中最重要的是定义注入接口，调用注入接口就可以完成 <code>A</code> 所需依赖的注入。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token keyword">interface</span> AComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>build 后会生成带有<code>Dagger</code>前缀的实现该接口的类：DaggerManComponent</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerAComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token function">DaggerAComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Builder <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> AComponent <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectA</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectA2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> A <span class="token function">injectA2</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AComponent <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DaggerAComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面生成的代码可以看出来 <code>DaggerAComponent</code>就是连接<code>依赖的对象A实例</code>和<code>需要注入的B实例属性</code>之间的桥梁。<code>DaggerAComponent</code>会查找目标类对应的成员属性注入类（即<code>A_MembersInjector</code>），然后调用<code>A_MembersInjector.injectB(instance, new B())</code>就能完成依赖注入。<strong>注意，Component 中注入接口的参数必须为需要注入依赖的类型，不能是 要注入类型的父类或子类，注入接口返回值为 void，接口名可以任意。</strong></p><p>接下来只需要在 A中调用<code>injectA</code>方法就能完成注入。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token keyword">init</span><span class="token punctuation">{</span>        DaggerManComponent<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">injectA</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>使用<code>@Inject</code>标注构造函数来提供依赖的对象实例的方法，不是万能的，在以下几种场景中无法使用：</p><ul><li>接口没有构造函数</li><li>第三方库的类不能被标注</li><li>构造函数中的参数必须配置</li></ul><p>为了解决上面的问题，<code>Dagger</code>又提供了一种新的注解方式：<code>Module</code></p><p>在<code>Module</code>中，Module 即用<code>@Module</code>标注的类。所以 Module 是提供依赖的对象实例的另一种方式。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Beta</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">subcomponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>Module</code>可以用<code>@Provides</code>标注的方法来提供依赖实例，方法的返回值就是依赖的对象实例。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> AModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>约定俗成的是<code>@Provides</code>方法一般以<code>provide</code>为前缀，Moudle 类以<code>Module</code>为后缀，一个 Module 类中可以有多个<code>@Provides</code>方法。</p><p>接下来，关联Module与Component：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>AModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> AComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>build之后，Module 和 Component 生成的类为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerAComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> AModule aModule<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">DaggerAComponent</span><span class="token punctuation">(</span>AModule aModuleParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>aModule <span class="token operator">=</span> aModuleParam<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span> A <span class="token function">injectA2</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> AModule_ProvideBFactory<span class="token punctuation">.</span><span class="token function">provideB</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AModule aModule<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Builder <span class="token function">aModule</span><span class="token punctuation">(</span>AModule aModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>aModule <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AComponent <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>aModule <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DaggerAComponent</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生成的 DaggerAComponent 和之前相比主要是<code>injectA2()</code>方法不一样，具体体现在：</p><p>没有<code>Module</code>时：</p><pre class=" language-java"><code class="language-java">A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有<code>Module</code>时：</p><pre class=" language-java"><code class="language-java"> A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> AModule_ProvideBFactory<span class="token punctuation">.</span><span class="token function">provideB</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>AModule_ProvideBFactory</strong>实现 Factory 接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AModule_ProvideBFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token operator">&lt;</span>B<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> AModule module<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">AModule_ProvideBFactory</span><span class="token punctuation">(</span>AModule module<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>module <span class="token operator">=</span> module<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> B <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">provideB</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> AModule_ProvideBFactory <span class="token function">create</span><span class="token punctuation">(</span>AModule module<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AModule_ProvideBFactory</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> B <span class="token function">provideB</span><span class="token punctuation">(</span>AModule instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">provideB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Cannot return null from a non-@Nullable @Provides method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在再来看 Dagger 2 最核心的三个部分：</p><ol><li>需要注入依赖的目标类，需要注入的实例属性由<code>@Inject</code>标注。</li><li>提供依赖对象实例的工厂，用<code>@Inject</code>标注构造函数或定义<code>Module</code>这两种方式都能提供依赖实例，Dagger 2 的注解处理器会在编译时生成相应的工厂类。<strong>Module的优先级比@Inject标注构造函数的高，意味着 Dagger 2 会先从 Module 寻找依赖实例。</strong></li><li>把依赖实例工厂创建的实例注入到目标类中的 Component。</li></ol><p>下面再讲述上面提到的在 Dagger 2 种几个注解的用法：</p><ul><li><code>@Inject</code> 一般情况下是标注成员属性和构造函数，标注的成员属性不能是<code>private</code>，Dagger 2 还支持方法注入，<code>@Inject</code>还可以标注方法。</li><li><code>@Provides</code> 只能标注方法，必须在 Module 中。</li><li><code>@Module</code> 用来标注 Module 类</li><li><code>@Component</code> 只能标注接口或抽象类，声明的注入接口的参数类型必须和目标类一致。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> dagger2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Dagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dagger 2 进阶使用</title>
      <link href="/posts/b74c4b6c/"/>
      <url>/posts/b74c4b6c/</url>
      
        <content type="html"><![CDATA[<h1 id="Dagger-2-进阶使用"><a href="#Dagger-2-进阶使用" class="headerlink" title="Dagger 2 进阶使用"></a>Dagger 2 进阶使用</h1><hr><p><a href="/posts/cbb172f8">Dagger 2 完全解析（一）,基本使用与原理</a><br><a href="/posts/b74c4b6c">Dagger 2 完全解析（二）, 进阶使用</a><br><a href="/posts/e30bee8a">Dagger 2 完全解析（三）,  Component 与 SubComponent</a><br><a href="/posts/e781e647">Dagger 2 完全解析（四）,在Android中的使用</a></p><blockquote><p>本系列文章是基于 Google Dagger 2.23.2 版本， Kotlin 1.3.21版本</p></blockquote><hr><p>在<a href="/post/cbb172f8.html">Dagger 2 完全解析（一）,基本使用与原理</a>中介绍了 <code>Dagger 2</code> 基本使用，但是在实战中基本使用是远远不够的，我们还需要掌握一些其它的知识，下面由简入繁地讲解这几个概念，同时结合 Dagger 2 的编译时生成代码分析背后的原理（示例代码沿用第一篇的）。</p><p>下面开始对<code>Lazy</code>、<code>Provider</code>、<code>Qualifier</code>和 <code>Scope</code>进行分析。</p><h2 id="Lazy-（延迟注入）"><a href="#Lazy-（延迟注入）" class="headerlink" title="Lazy （延迟注入）"></a>Lazy （延迟注入）</h2><p>有时我们想注入的依赖在使用时再完成初始化，提高加载速度，就可以使用注入<code>Lazy&lt;T&gt;</code>。只有在调用<code>Lazy</code>的 <code>get()</code> 方法时才会初始化依赖实例注入依赖。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lazy</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>A</code>中使用：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> lazyD<span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>D<span class="token operator">></span>    <span class="token keyword">fun</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lazyD<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回D的实例</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Make app</code>后，在<code>DaggerAComponent</code>中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerAComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> AModule aModule<span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectA</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectA2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> A <span class="token function">injectA2</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> AModule_ProvideBFactory<span class="token punctuation">.</span><span class="token function">provideB</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectC</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// DoubleCheck 是线程安全的Lazy实例初始化类</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectLazyD</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> DoubleCheck<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span>D_Factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><code>DoubleCheck</code> 是线程安全的<code>Lazy</code>实例初始化工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>P <span class="token keyword">extends</span> <span class="token class-name">Provider</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> T<span class="token operator">></span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">lazy</span><span class="token punctuation">(</span>P provider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token keyword">instanceof</span> <span class="token class-name">Lazy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>      <span class="token keyword">final</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span> lazy <span class="token operator">=</span> <span class="token punctuation">(</span>Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> provider<span class="token punctuation">;</span>      <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DoubleCheck</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在需要使用的时候调用此方法进行返回相应的实例</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object result <span class="token operator">=</span> instance<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> UNINITIALIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> instance<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> UNINITIALIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span>          result <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          instance <span class="token operator">=</span> <span class="token function">reentrantCheck</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>          provider <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="Provider-注入"><a href="#Provider-注入" class="headerlink" title="Provider 注入"></a>Provider 注入</h2><p>有时候不仅仅是注入单个实例，我们需要多个实例，这时可以使用注入<code>Provider&lt;T&gt;</code>，每次调用它的 <code>get()</code> 方法都会调用到 <code>@Inject 构造函数</code>创建新实例或者<code>Module 的 provide 方法</code>返回实例。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> providerD<span class="token operator">:</span> Provider<span class="token operator">&lt;</span>D<span class="token operator">></span>    <span class="token keyword">fun</span> <span class="token function">createDFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>D<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> ds <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>D<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>providerD<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ds    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Make app</code>后，在<code>DaggerAComponent</code>中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerAComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> AModule aModule<span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectA</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectA2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">private</span> A <span class="token function">injectA2</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> AModule_ProvideBFactory<span class="token punctuation">.</span><span class="token function">provideB</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectC</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectLazyD</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> DoubleCheck<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span>D_Factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注入provider ,将`Factory`传入</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectProviderD</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> D_Factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>再来看看<code>D_Factory</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">D_Factory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token operator">&lt;</span>D<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> D_Factory INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D_Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 每次调用get方法都会重新创建实例</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> D <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> D_Factory <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> D <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面可以看到，每次调用<code>get</code>方法都会重新创建实例, <code>D_Factory</code>实现了<code>Factory&lt;D&gt;</code>而<code>Factory&lt;D&gt;</code>继承自<code>Provider&lt;D&gt;</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">D_Factory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token operator">&lt;</span>D<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Provider</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="Qualifier（限定符）"><a href="#Qualifier（限定符）" class="headerlink" title="Qualifier（限定符）"></a>Qualifier（限定符）</h2><p>试想这样一种情况：在 <code>AModule</code>提供了两个生成<code>B</code> 实例的<code>provide</code> 方法，如果使用 <code>Dagger 2</code> 在 <code>A</code> 中注入<code>B</code>实例时应该选择哪一个方法呢？</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> AModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这时 Dagger 2 不知道使用<code>provideB</code>还是<code>provideOther</code>提供的实例，在编译时就会出现：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>Dagger<span class="token operator">/</span>DuplicateBindings<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>B is bound multiple times<span class="token operator">:</span></code></pre><p>而<code>@Qualifier</code>注解就是用来解决这个问题，使用注解来确定使用哪种 provide 方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Qualifier</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>我们可以发现<code>@Qualifier</code>是用来修饰注解的，所以它是不能直接作用到<code>provide</code>方法上。</p><p>下面是自定义的<code>@Named</code>注解，你也可以用自定义的其他 Qualifier 注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Named</span> <span class="token punctuation">{</span>  String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 provide 方法上加上<code>@Named</code>注解，用来区分</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> AModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@Named</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token annotation builtin">@Named</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>还需要在<code>Inject</code> 注入的地方加上<code>@field:Named</code>注解:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token annotation builtin">@Inject</span>    <span class="token annotation builtin">@field:Named</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> b<span class="token operator">:</span> B     <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>*<em>tips: *</em> 在<code>kotlin</code>中使用<code>@Name</code>给属性注入时需要添加<code>@field</code>，不然注解不生效。</p><p>这样在依赖注入时，Dagger 2 就会使用<code>provideB</code>方法提供的实例，所以<strong>Qualifier（限定符）的作用相当于起了个区分的别名。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerAComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> AModule aModule<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectA</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectA2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> A <span class="token function">injectA2</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用的是 provide方法</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> AModule_ProvideBFactory<span class="token punctuation">.</span><span class="token function">provideB</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>当然啦，我们也可以自定义注解进行区分，比如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Qualifier</span><span class="token annotation builtin">@Retention</span><span class="token punctuation">(</span>AnnotationRetention<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation builtin">@Target</span><span class="token punctuation">(</span>AnnotationTarget<span class="token punctuation">.</span>FUNCTION<span class="token punctuation">,</span> AnnotationTarget<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token keyword">annotation</span> <span class="token keyword">class</span> Other</code></pre><p>然后在<code>provideOther</code>和<code>lateinit var b: B</code>上加上<code>@Other</code>即可。</p><h2 id="Scope（作用域）"><a href="#Scope（作用域）" class="headerlink" title="Scope（作用域）"></a>Scope（作用域）</h2><p>Scope 是用来确定注入的实例的生命周期的，如果没有使用 Scope 注解，Component 每次调用 Module 中的 provide 方法或 <code>Inject 构造函数</code>生成的工厂时都会创建一个新的实例，而使用 Scope 后可以复用之前的依赖实例。下面先介绍 Scope 的基本概念与原理，再分析 Singleton、Reusable 等作用域。</p><h3 id="Scope-基本概念"><a href="#Scope-基本概念" class="headerlink" title="Scope 基本概念"></a>Scope 基本概念</h3><p>先介绍 Scope 的用法，<code>@Scope</code>是元注解，是用来标注自定义注解的，如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Scope</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><strong>Scope 注解只能标注目标类、@provide 方法和 Component。</strong>Scope 注解要生效的话，需要同时标注在 <code>Component</code> 和提供依赖实例的<code>Module 或目标类</code>上。<strong>Module 中 provide 方法中的 Scope 注解必须和 与之绑定的 Component 的 Scope 注解一样，否则作用域不同会导致编译时会报错。</strong></p><p>那么 Scope 注解又是如何产生作用的呢，怎么保证生成的依赖实例的生命周期呢？</p><p>在 Dagger 2 官方文档中我找到一句话，非常清楚地描述了<code>@Scope</code>的原理：</p><blockquote><p>When a binding uses a scope annotation, that means that the component object holds a reference to the bound object until the component object itself is garbage-collected.</p></blockquote><p>当 Component 与 Module、目标类（需要被注入依赖）使用 Scope 注解绑定时，意味着 Component 对象持有绑定的依赖实例的一个引用直到 Component 对象本身被回收。<strong>也就是作用域的原理，其实是让生成的依赖实例的生命周期与 Component 绑定，Scope 注解并不能保证生命周期，要想保证赖实例的生命周期，需要确保 Component 的生命周期。</strong></p><p>下面以<code>@AScope</code>为例，看 Scope 注解背后的代码：</p><p>先定义<code>AScope</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Scope</span><span class="token annotation builtin">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation builtin">@Target</span><span class="token punctuation">(</span>FIELD<span class="token punctuation">,</span> FUNCTION<span class="token punctuation">,</span> CLASS<span class="token punctuation">)</span><span class="token keyword">annotation</span> <span class="token keyword">class</span> AScope</code></pre><h4 id="使用Module方式"><a href="#使用Module方式" class="headerlink" title="使用Module方式"></a>使用Module方式</h4><p>在<code>AModule</code>中：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> AModule <span class="token punctuation">{</span>    <span class="token annotation builtin">@AScope</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在<code>AComponent</code>中</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>AModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token annotation builtin">@AScope</span><span class="token keyword">interface</span> AComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这样生成的 <code>B</code>实例就与 <code>AComponent</code> 绑定了。下面看编译时生成的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerAComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Provider<span class="token operator">&lt;</span>B<span class="token operator">></span> provideBProvider<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">DaggerAComponent</span><span class="token punctuation">(</span>AModule aModuleParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initialize</span><span class="token punctuation">(</span>aModuleParam<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">final</span> AModule aModuleParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>provideOtherProvider <span class="token operator">=</span> DoubleCheck<span class="token punctuation">.</span><span class="token function">provider</span><span class="token punctuation">(</span>AModule_ProvideBFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>aModuleParam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectA</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectA2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> A <span class="token function">injectA2</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// provideOtherProvider 不再由Factory创建，而是DobuleCheck</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> provideBProvider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>从上面 <code>DaggerAComponent</code>的代码可以看出使用了 <code>AScope</code> 作用域后，<code>provideBProvider</code>由<code>AModule_ProvideCarFactory.create()</code>变为了<code>DoubleCheck.provider(AModule_ProvideBFactory.create())</code>。而 DoubleCheck 包装的意义在于持有了 <code>B</code>的实例，而且只会生成一次实例，也就是说：没有用 MyScope 作用域之前，<code>DaggerAComponent</code> 每次注入依赖都会新建一个 <code>B</code>实例，而用 <code>AScope</code> 作用之后，每次注入依赖都只会返回第一次生成的实例。通过生成的代码可以发现这和<code>Lazy</code>的方式很相似。</p><h4 id="注解到目标类方式"><a href="#注解到目标类方式" class="headerlink" title="注解到目标类方式"></a>注解到目标类方式</h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> A <span class="token punctuation">{</span>    <span class="token annotation builtin">@AScope</span>    <span class="token annotation builtin">@Inject</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> b<span class="token operator">:</span> B<span class="token punctuation">}</span><span class="token annotation builtin">@AScope</span><span class="token keyword">class</span> B  <span class="token annotation builtin">@Inject</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token annotation builtin">@AScope</span><span class="token annotation builtin">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span>AModule<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> AComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectA</span><span class="token punctuation">(</span>a<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> AModule <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>使用这种方式生成的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerAComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Provider<span class="token operator">&lt;</span>B<span class="token operator">></span> bProvider<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">DaggerAComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 此处使用的是Factory,不是AModule_ProvideBFactory</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bProvider <span class="token operator">=</span> DoubleCheck<span class="token punctuation">.</span><span class="token function">provider</span><span class="token punctuation">(</span>B_Factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectA</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectA2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> A <span class="token function">injectA2</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> bProvider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>Scope 作用域的本质：Component 间接持有依赖实例的引用，把实例的作用域与 Component 绑定</strong></p><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p>在了解作用域的原理后，再来理解 Dagger 2 提供的自带作用域就容易了。<code>@Singleton</code>顾名思义保证单例，那么它又是如何实现的呢，实现了单例模式那样只返回一个实例吗？</p><p>把上面例子中<code>@AScope</code>换成<code>@Singleton</code>，发现生成的 DaggerAComponent 和其他类没有变化。也只是用<code>DoubleCheck</code>包装了工厂而已，并没有什么特殊实现。所以 Singleton 作用域可以保证一个 Component 中的单例，但是如果产生多个 Component 实例，那么实例的单例就无法保证了。</p><p>所以在网上一些例子中，有看到<code>AppComponent</code>使用 Singleton 作用域，保证绑定的依赖实例的单例。它生效的原因是<code>AppComponent</code>只会在 Application 中创建一次，由<code>AppComponent</code>的单例来保证绑定的依赖实例的单例。</p><p><strong>注意：Component 可以同时被多个 Scope 标记。</strong>即 Component 可以和多个 Scope 的 Moudle 或目标类绑定。</p><h3 id="Reusable"><a href="#Reusable" class="headerlink" title="Reusable"></a>Reusable</h3><p>上文中的自定义的<code>@AScope</code>和<code>@Singleton</code>都可以使得绑定的 Component 缓存依赖的实例，但是与之绑定 Component 必须有相同的 Scope 标记。假如我只想单纯缓存依赖的实例，可以复用之前的实例，不想关心与之绑定是什么 Component，应该怎么办呢？。</p><p>这时就可以使用<code>@Reusable</code>作用域，<strong>Reusable 作用域不关心绑定的 Component，Reusable 作用域只需要标记目标类或 provide 方法，不用标记 Component。</strong>下面先看看使用 Reusable 作用域后，生成的 <code>DaggerAComponent</code> 的变化：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DaggerAComponent</span> <span class="token keyword">implements</span> <span class="token class-name">AComponent</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Provider<span class="token operator">&lt;</span>B<span class="token operator">></span> provideBProvider<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">DaggerAComponent</span><span class="token punctuation">(</span>AModule aModuleParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initialize</span><span class="token punctuation">(</span>aModuleParam<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">final</span> AModule aModuleParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>provideBProvider <span class="token operator">=</span> SingleCheck<span class="token punctuation">.</span><span class="token function">provider</span><span class="token punctuation">(</span>AModule_ProvideBFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>aModuleParam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">injectA</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">injectA2</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> A <span class="token function">injectA2</span><span class="token punctuation">(</span>A instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A_MembersInjector<span class="token punctuation">.</span><span class="token function">injectB</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> provideBProvider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>从上面代码可以看出使用<code>@Reusable</code>作用域后，利用到 Reusable 实例的 Component 会间接持有实例的引用。但是这里是用<code>SingleCheck</code>而不是<code>DoubleCheck</code>，在多线程情况下可能会生成多个实例。因为<code>@Reusable</code>作用域目的只是可以复用之前的实例，并不需要严格地保证实例的唯一，所以使用 <code>SingleCheck</code> 就足够了。</p><h3 id="Releasable-references（可释放引用）"><a href="#Releasable-references（可释放引用）" class="headerlink" title="Releasable references（可释放引用）"></a><del>Releasable references（可释放引用）</del></h3><p>相关内容在新版<code>Dagger2</code>已经废除。</p><h2 id="Binding-Instances"><a href="#Binding-Instances" class="headerlink" title="Binding Instances"></a>Binding Instances</h2><p>通过前面作用域的讲解，可以清楚 Component 可以间接持有 Module 或 Inject 目标类构造函数提供的依赖实例，除了这两种方式，Component 还可以在创建 Component 的时候绑定依赖实例，用以注入。这就是<code>@BindsInstance</code>注解的作用，只能在 Component.Builder 中使用。</p><p>在 Android 中使用 Dagger 2 时，activity 实例经常也需要作为依赖实例用以注入，在之前只能使用 Module：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Module</span><span class="token keyword">class</span> MainActivityModule <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mainActivity<span class="token operator">:</span> MainActivity    <span class="token keyword">constructor</span><span class="token punctuation">(</span>mainActivity<span class="token operator">:</span> MainActivity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainActivity <span class="token operator">=</span> mainActivity    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Provides</span>    <span class="token keyword">fun</span> <span class="token function">provideMainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MainActivity <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainActivity    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>而使用<code>@BindsInstance</code>的话会更加简单：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Component</span><span class="token keyword">interface</span> MainActivityComponent <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">injectMainActivity</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> MainActivity<span class="token punctuation">)</span>    <span class="token annotation builtin">@Component</span><span class="token punctuation">.</span>Builder    <span class="token keyword">interface</span> Builder <span class="token punctuation">{</span>        <span class="token annotation builtin">@BindsInstance</span>        <span class="token keyword">fun</span> <span class="token function">activity</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Activity<span class="token punctuation">)</span><span class="token operator">:</span> Builder        <span class="token keyword">fun</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MainActivityComponent    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意在调用<code>build()</code>创建 Component 之前，所有<code>@BindsInstance</code>方法必须先调用。上面例子中 <code>MainActivityComponent</code>还可以注入 Activity 类型的依赖，但是不能注入 <code>MainActivity</code>，因为 Dagger 2 是使用具体类型作为依据的（也就是只能使用<code>@Inject Activity activity</code>而不是<code>@Inject MainActivity activity</code>）。</p><p>如果<code>@BindsInstance</code>方法的参数可能为 null，需要再用<code>@Nullable</code>标记，同时标注 Inject 的地方也需要用<code>@Nullable</code>标记。这时 Builder 也可以不调用<code>@BindsInstance</code>方法，这样 Component 会默认设置 instance 为 null。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Lazy 可以延时注入，Provider 可以创建多个实例</li><li>Qualifier 限定符用来解决同一个实例不同方法提供冲突的问题，可以依赖实例起个别名用来区分，或者自定义注解</li><li>Scope 作用域的本质是 Component 会持有与之绑定的依赖实例的引用，要想确保实例的生命周期，关键在于控制 Component 的生命周期。</li><li>推荐优先使用<code>@BindsInstance</code>方法，相对于写一个带有构造函数带有参数的 Module。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> dagger2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Dagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android DataBinding 从入门到进阶</title>
      <link href="/posts/3c6ea6b6/"/>
      <url>/posts/3c6ea6b6/</url>
      
        <content type="html"><![CDATA[<h2 id="Android-DataBinding-从入门到进阶"><a href="#Android-DataBinding-从入门到进阶" class="headerlink" title="Android DataBinding 从入门到进阶"></a>Android DataBinding 从入门到进阶</h2><p>DataBinding 是<code>google</code>发布的一个数据绑定框架，用于降低布局和逻辑的耦合性，使代码逻辑更加清晰。大量减少 Activity 内的代码，数据能够单向或双向绑定到 layout 文件中，有助于防止内存泄漏，而且能自动进行空检测以避免空指针异常。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li><p>详情内容请参考：<a href="https://developer.android.com/topic/libraries/data-binding/start" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/data-binding/start</a></p></li><li><p>启用 DataBinding 的方法是在对应 Model 的 <strong><code>build.gradle</code></strong> 文件里加入以下代码，同步后就能引入对 DataBinding 的支持</p><pre class=" language-groovy"><code class="language-groovy">android <span class="token punctuation">{</span>    <span class="token punctuation">...</span>   dataBinding <span class="token punctuation">{</span>       enabled <span class="token operator">=</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>如果<code>Android Studio</code>的版本小于<code>3.2</code>的需要在<code>gradle.properties</code>中添加：</p><pre class=" language-groovy"><code class="language-groovy">android<span class="token operator">.</span>databinding<span class="token operator">.</span>enableV2<span class="token operator">=</span><span class="token boolean">true</span></code></pre></li></ol><p><strong>tips:</strong>   1. 推荐使用最新的<code>Android Studio</code>版本和<code>AndroidX</code>库。</p><p>​            2.<code>build.gradle</code>中添加<code>'apply plugin : 'kotlin-kapt'</code>。</p><h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><h3 id="改变布局文件-layout"><a href="#改变布局文件-layout" class="headerlink" title="改变布局文件 layout"></a>改变布局文件 <strong><code>layout</code></strong></h3><p>启用 DataBinding 后，打开原有的布局文件，选中根布局的 <strong>根布局</strong>，按住 <strong>Alt + 回车键</strong>，点击 “<strong>Convert to data binding layout</strong>”，就可以生成 DataBinding 需要的布局规则。</p><p><img src="/assets/image/1560319999402.png" alt="1560319999402"></p><p>转换后的内容为：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><ul><li>和原始布局的区别在于多出了一个 <strong>layout</strong> 标签将原布局包裹了起来；</li><li><strong>data</strong> 标签用于声明要用到的变量以及变量类型，它搭建了 View 和 Model 之间的通道。</li></ul><h3 id="创建Model"><a href="#创建Model" class="headerlink" title="创建Model"></a>创建<code>Model</code></h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>ixiaow<span class="token punctuation">.</span>databindingsample<span class="token punctuation">.</span>model<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">val</span> password<span class="token operator">:</span> String<span class="token punctuation">)</span></code></pre><h3 id="Model-与-布局文件关联"><a href="#Model-与-布局文件关联" class="headerlink" title="Model 与 布局文件关联"></a><strong><code>Model</code></strong> 与 布局文件关联</h3><p>在 <strong>data</strong> 标签里声明要使用到的变量名、类的全路径</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.databindingsample.model.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span></code></pre><p>在 相应部分使用<code>User</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                  <span class="token attr-name">...</span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.name}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                   <span class="token attr-name">...</span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><h3 id="给Model赋值"><a href="#给Model赋值" class="headerlink" title="给Model赋值"></a>给<code>Model</code>赋值</h3><p>写好布局文件后，在 <code>Android Studio</code>中执行<code>make project</code>或者<code>make app</code>, 完成后，在<code>Activity</code>中:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token keyword">val</span> dataBinding<span class="token operator">:</span> ActivityMainBinding <span class="token operator">=</span>            DataBindingUtil<span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 给user初始化值</span>        dataBinding<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行<code>App</code>后就可以看到结果啦。</p><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><ul><li><p><strong><code>import</code></strong></p><p>我们可以像使用<code>java</code>或者<code>kotlin</code>文件一样，导入需要的类名路径即可，比如说：</p><ol><li><p>如果 User 类型要多处用到，也可以直接将之 <strong>import</strong> 进来，这样就不用每次都指明整个包名路径了，而 <code>java.lang.*</code> 包中的类会被自动导入，所以可以直接使用：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.databindingsample.model.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>       <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span>       <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span></code></pre></li><li><p>导入<code>java</code>或<code>kotlin</code>文件中的系统类，比如 <code>import</code> 集合 <code>list</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.model.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>List&amp;lt;User<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span></code></pre><p><strong>:heart:</strong> <code>&lt;</code>需要被替换成<code>&amp;lt;</code></p></li><li><p>如果存在 <strong>import</strong> 的类名相同的情况，可以使用 <strong>alias</strong> 指定别名</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.model1.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span>       <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TempUser<span class="token punctuation">"</span></span>       <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.model2.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>       <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span>       <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>       <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tempUserInfo<span class="token punctuation">"</span></span>       <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TempUser<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ul><ul><li><p>预览添加默认值</p><p>由于 <code>@{user.name}</code>在布局文件中并没有明确的值，所以在预览视图中什么都不会显示，不便于观察文本的大小和字体颜色等属性，此时可以为之设定默认值（文本内容或者是字体大小等属性都适用），默认值将只在预览视图中显示，且默认值不能包含引号</p><pre class=" language-xml"><code class="language-xml">android:text="@{userInfo.name,default=defaultValue}"</code></pre><p>此外，也可以通过 ActivityMainBinding 直接获取到指定 ID 的控件:</p><pre class=" language-java"><code class="language-java">dataBinding<span class="token punctuation">.</span>mUserName<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"lisi"</span></code></pre></li><li><p>自定义生成的绑定类的类名</p><p>每个数据绑定布局文件都会生成一个绑定类，<strong>ViewDataBinding</strong> 的实例名是根据布局文件名来生成，采用驼峰命名法来命名，并省略布局文件名包含的下划线。控件的获取方式类似，但首字母小写。</p><p>通过如下方式自定义 ViewDataBinding 的实例名</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CustomBinding<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span></code></pre></li><li><p>在 <strong>Fragment</strong> 和 <strong>RecyclerView</strong> 中使用 </p><ol><li>在 Fragment 中的使用</li></ol><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> BlankFragment <span class="token operator">:</span> <span class="token function">Fragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span> container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> blankFragmentBinding<span class="token operator">:</span> BlankFragmentBinding <span class="token operator">=</span>            DataBindingUtil<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>blank_fragment<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> blankFragmentBinding<span class="token punctuation">.</span>root    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>在RecyclerView中使用</p><p>具体使用请参考：<a href="https://blog.csdn.net/yehui928186846/article/details/78408294" target="_blank" rel="noopener">DataBinding 应用于RecyclerView</a></p></li></ol><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> ViewGroup<span class="token punctuation">,</span> viewType<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> RecyclerViewHolder <span class="token punctuation">{</span>        <span class="token keyword">val</span> itemMvvmBinding <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span>inflate<span class="token operator">&lt;</span>ViewDataBinding<span class="token operator">></span><span class="token punctuation">(</span>            LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>            R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_mvvm<span class="token punctuation">,</span>            parent<span class="token punctuation">,</span>            <span class="token boolean">false</span>        <span class="token punctuation">)</span>        itemMvvmBinding<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">RecyclerViewHolder</span><span class="token punctuation">(</span>itemMvvmBinding<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> RecyclerViewHolder<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> itemMvvmBinding <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> userBean <span class="token operator">=</span> <span class="token keyword">data</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        itemMvvmBinding<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>userBean<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//将position保存在itemView的Tag中，以便点击时进行获取</span>        itemMvvmBinding<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        itemMvvmBinding<span class="token punctuation">.</span>btnUpdate<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token function">OnBtnClickListener</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> userBean<span class="token punctuation">)</span><span class="token punctuation">)</span>        itemMvvmBinding<span class="token punctuation">.</span>btnDelete<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token function">OnBtnClickListener</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 立刻执行绑定</span>        itemMvvmBinding<span class="token punctuation">.</span><span class="token function">executePendingBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><p>*<em>以上实现数据绑定的方式，每当绑定的变量发生变化的时候，都需要重新向 ViewDataBinding 传递新的变量值才能刷新 UI 。接下来看如何实现自动刷新 UI *</em></p><h2 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h2><p>实现数据变化自动驱动 UI 刷新的方式有三种：<code>BaseObservable</code>、<code>ObservableField</code>、<code>ObservableCollection</code></p><h3 id="BaseObservable"><a href="#BaseObservable" class="headerlink" title="BaseObservable"></a>BaseObservable</h3><p>一个简单的<code>ViewModel</code> 类被更新后，并不会让 UI 自动更新。而数据绑定后，我们自然会希望数据变更后 UI 会即时刷新，<code>Observable</code> 就是为此而生的概念。</p><p><strong>BaseObservable</strong> 提供了 <strong>notifyChange()</strong> 和 <strong>notifyPropertyChanged()</strong> 两个方法。</p><ul><li><strong>notifyChange()</strong></li></ul><p>它会刷新所有的值。</p><ul><li><strong>notifyPropertyChanged()</strong></li></ul><p>它只会根据对应的<code>BR</code>的<code>flag</code>更新，该 <code>BR</code> 的生成通过注释 <strong><code>@Bindable</code></strong> 生成，可以通过 <strong>BR notify</strong> 特定属性关联的视图。</p><ul><li>由于<code>kotlin</code>的属性默认是<code>public</code>修饰，所以可以直接在属性上<code>@Bindable</code>, 如何设置了修饰符且不为<code>public</code>的话，则可使用<code>@get BIndable</code>（表示在<code>get()</code>方法上标记<code>@Bindable</code>）</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>databinding<span class="token punctuation">.</span>BaseObservable<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>databinding<span class="token punctuation">.</span>Bindable<span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>ixiaow<span class="token punctuation">.</span>sample<span class="token punctuation">.</span>BR<span class="token keyword">class</span> UserInfo <span class="token operator">:</span> <span class="token function">BaseObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对name进行@Bindable标志，然后会生成BR.name</span>    <span class="token annotation builtin">@Bindable</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            field <span class="token operator">=</span> value            <span class="token comment" spellcheck="true">// 当name,发生改变时只会刷新与name相关控件的值，不会刷新其他的值</span>            <span class="token function">notifyPropertyChanged</span><span class="token punctuation">(</span>BR<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    @<span class="token keyword">get</span><span class="token operator">:</span> Bindable    <span class="token keyword">var</span> password<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            field <span class="token operator">=</span> value            <span class="token comment" spellcheck="true">// 当password 发生改变时，也会刷新其他属性相关的控件的值</span>            <span class="token function">notifyChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>布局文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.model.UserInfo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_chain</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">spread</span><span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/mUserName<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{userInfo.name}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{userInfo.password}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/mUserName<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li><p><strong><code>OnPropertyChangedCallback</code></strong></p><p>实现了 <strong>Observable</strong> 接口的类允许注册一个监听器<code>OnPropertyChangedCallback</code>，当可观察对象的属性更改时就会通知这个监听器。</p><p>当中 <code>propertyId</code> 就用于标识特定的字段</p></li></ol><pre class=" language-kotlin"><code class="language-kotlin">user<span class="token punctuation">.</span><span class="token function">addOnPropertyChangedCallback</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Observable<span class="token punctuation">.</span><span class="token function">OnPropertyChangedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onPropertyChanged</span><span class="token punctuation">(</span>sender<span class="token operator">:</span> Observable<span class="token punctuation">,</span> propertyId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="ObservableField"><a href="#ObservableField" class="headerlink" title="ObservableField"></a>ObservableField</h3><p>继承于 <code>Observable</code> 类相对来说限制有点高，且也需要进行<code>notify</code> 操作，因此为了简单起见可以选择使用 <strong><code>ObservableField</code></strong>。 可以理解为官方对 <code>BaseObservable</code> 中字段的注解和刷新等操作的封装，官方原生提供了对基本数据类型的封装，例如 <strong><code>ObservableBoolean、ObservableByte、ObservableChar、ObservableShort、ObservableInt、ObservableLong、ObservableFloat、ObservableDouble</code></strong> 以及 <strong><code>ObservableParcelable</code></strong> ，也可通过 <strong><code>ObservableField</code></strong> 泛型来申明其他类型。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ObservableUser <span class="token punctuation">{</span>    <span class="token keyword">val</span> name <span class="token operator">=</span> ObservableField<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> password <span class="token operator">=</span> ObservableField<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>对 <code>ObservableUser</code>属性值的改变都会立即触发 UI 刷新，概念上与<code>Observable</code> 区别不大，具体效果可看下面提供的源代码，这里不再赘述</p><h3 id="ObservableCollection"><a href="#ObservableCollection" class="headerlink" title="ObservableCollection"></a>ObservableCollection</h3><p><code>dataBinding</code> 也提供了包装类用于替代原生的 <code>List</code> 和 <code>Map</code>，分别是 <code>ObservableList</code> 和 <code>ObservableMap</code>,当其包含的数据发生变化时，绑定的视图也会随之进行刷新</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.databinding.ObservableList<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.databinding.ObservableMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.model.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ObservableList&amp;lt;User<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ObservableMap&amp;lt;String, User<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_chain</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">spread</span><span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/mUserName<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{list[index].name}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{map[key].password}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/mUserName<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token keyword">val</span> dataBinding<span class="token operator">:</span> ActivityMainBinding <span class="token operator">=</span>            DataBindingUtil<span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        dataBinding<span class="token punctuation">.</span>map <span class="token operator">=</span> ObservableArrayMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            <span class="token string">"android"</span> <span class="token keyword">to</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">,</span> <span class="token string">"12367"</span><span class="token punctuation">)</span>            <span class="token string">"java"</span> <span class="token keyword">to</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"12534"</span><span class="token punctuation">)</span>            <span class="token string">"c"</span> <span class="token keyword">to</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"12344"</span><span class="token punctuation">)</span>            <span class="token string">"c++"</span> <span class="token keyword">to</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"c++"</span><span class="token punctuation">,</span> <span class="token string">"14423"</span><span class="token punctuation">)</span>            <span class="token string">"c#"</span> <span class="token keyword">to</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"c#"</span><span class="token punctuation">,</span> <span class="token string">"12334"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        dataBinding<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token string">"c"</span>        dataBinding<span class="token punctuation">.</span>list <span class="token operator">=</span> ObservableArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"1235"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token string">"c++"</span><span class="token punctuation">,</span> <span class="token string">"123447"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        dataBinding<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>双向绑定的意思即为当数据改变时同时使视图刷新，而视图改变时也可以同时改变数据</p><p>看以下例子，当 <code>EditText</code>的输入内容改变时，会同时同步到变量 <code>user</code>,绑定变量的方式比单向绑定多了一个等号：<code>android:text="@={user.name}"</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.model.ObservableUser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_chain</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">spread</span><span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/mUserName<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@<span class="token punctuation">=</span>{userInfo.name, default<span class="token punctuation">=</span>`name`}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@<span class="token punctuation">=</span>{userInfo.password, default<span class="token punctuation">=</span>`1234`}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/mUserName<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token keyword">val</span> dataBinding<span class="token operator">:</span> ActivityMainBinding <span class="token operator">=</span>            DataBindingUtil<span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token keyword">val</span> observableUser <span class="token operator">=</span> <span class="token function">ObservableUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        observableUser<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"我是name"</span><span class="token punctuation">)</span>        observableUser<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"我是password"</span><span class="token punctuation">)</span>        dataBinding<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> observableUser    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>严格意义上来说，事件绑定也是一种变量绑定，只不过设置的变量是回调接口而已。</p><p>事件绑定可用于以下多种回调事件：</p><ul><li>android:onClick</li><li>android:onLongClick</li><li>android:afterTextChanged</li><li>android:onTextChanged</li><li>…</li></ul><p>新建一个 <strong>UserPresenter</strong> 类来声明 <strong>onClick()</strong> 和 <strong>afterTextChanged()</strong> 事件相应的回调方法</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> UserPresenter <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onUserNameClick</span><span class="token punctuation">(</span>user<span class="token operator">:</span> ObservableUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">afterTextChanged</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Editable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> user<span class="token operator">:</span> ObservableUser<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.UserPresenter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>presenter<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserPresenter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.model.ObservableUser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintVertical_chain</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">spread</span><span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/mUserName<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{()-<span class="token punctuation">></span> presenter.onUserNameClick(userInfo)}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@<span class="token punctuation">=</span>{userInfo.name, default<span class="token punctuation">=</span>`name`}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/mPassword<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>afterTextChanged</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{presenter::afterTextChanged}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@<span class="token punctuation">=</span>{userInfo.password, default<span class="token punctuation">=</span>`1234`}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/mUserName<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{(theView)-<span class="token punctuation">></span>presenter.saveUser(theView, userInfo)}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@<span class="token punctuation">=</span>{userInfo.password, default<span class="token punctuation">=</span>`1234`}<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/mPassword<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintBottom_toBottomOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintLeft_toLeftOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintRight_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><p>方法引用的方式与调用函数的方式类似，</p><ol><li>可以选择保持事件回调方法的签名一致：<strong><code>@{presenter.afterTextChanged}</code></strong>，此时方法名可以不一样，但方法参数和返回值必须和原始的回调函数保持一致。</li><li>可以引用不遵循默认签名的函数：<strong><code>@{()-&gt;presenter.onUserNameClick(userInfo)}</code></strong>，这里用到了 Lambda 表达式，这样就可以不遵循默认的方法签名，将<code>userInfo</code>对象直接传回点击方法中。此外，也可以使用方法引用 <strong><code>::</code></strong> 的形式来进行事件绑定</li></ol><h2 id="使用类方法"><a href="#使用类方法" class="headerlink" title="使用类方法"></a>使用类方法</h2><p>首先定义一个静态方法</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> StringUtils <span class="token punctuation">{</span>   <span class="token keyword">fun</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span> str<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span>String <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 data 标签中导入该工具类</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.sample.StringUtils<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>然后就可以像对待一般的函数一样来调用了</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>   <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{()-<span class="token punctuation">></span>userPresenter.onUserNameClick(userInfo)}<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{StringUtils.toUpperCase(userInfo.name)}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h4 id="基础运算符"><a href="#基础运算符" class="headerlink" title="基础运算符"></a>基础运算符</h4><p>DataBinding 支持在布局文件中使用以下运算符、表达式和关键字</p><ul><li>算术 <code>+ - / * %</code></li><li>字符串合并<code>+</code></li><li>逻辑<code>&amp;&amp; ||</code></li><li>二元<code>&amp; | ^</code></li><li>一元 <code>+ - ! ~</code></li><li>移位<code>&gt;&gt; &gt;&gt;&gt; &lt;&lt;</code></li><li>比较<code>== &gt; &lt; &gt;= &lt;=</code></li><li><code>Instanceof</code></li><li><code>Grouping ()</code></li><li><code>character, String, numeric, null</code></li><li><code>Cast</code></li><li>方法调用</li><li><code>Field</code> 访问</li><li><code>Array</code>访问 []</li><li>三元<code>?:</code></li></ul><p>目前不支持以下操作</p><ul><li><code>this</code></li><li><code>super</code></li><li><code>new</code></li><li>显示泛型调用</li></ul><p>此外，DataBinding 还支持以下几种形式的调用:</p><h4 id="Null-Coalescing"><a href="#Null-Coalescing" class="headerlink" title="Null Coalescing"></a>Null Coalescing</h4><p>空合并运算符 <strong><code>??</code></strong> 会取第一个不为 <code>null</code> 的值作为返回值</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.name ?? user.password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>等价于</p><pre class=" language-xml"><code class="language-xml">android:text="@{user.name != null ? user.name : user.password}"</code></pre><h4 id="属性控制"><a href="#属性控制" class="headerlink" title="属性控制"></a>属性控制</h4><p>可以通过变量值来控制 View 的属性</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>可见性变化<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{user.male  ? View.VISIBLE : View.GONE}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h4 id="避免空指针异常"><a href="#避免空指针异常" class="headerlink" title="避免空指针异常"></a>避免空指针异常</h4><p>DataBinding 也会自动帮助我们避免空指针异常<br>例如，如果 <strong>“@{userInfo.password}”</strong> 中 <strong>userInfo</strong> 为 <strong>null</strong> 的话，<strong>userInfo.password</strong> 会被赋值为默认值 <strong>null</strong>，而不会抛出空指针异常</p><h2 id="include-和-viewStub"><a href="#include-和-viewStub" class="headerlink" title="include 和 viewStub"></a>include 和 viewStub</h2><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>对于 include 的布局文件，一样是支持通过 dataBinding 来进行数据绑定，此时一样需要在待 include 的布局中依然使用 layout 标签，声明需要使用到的变量</p><p><code>view_include.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.databindingsample.model.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.constraint.ConstraintLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#acc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{userInfo.name}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.constraint.ConstraintLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><p>在主布局文件中将相应的变量传递给 include 布局，从而使两个布局文件之间共享同一个变量</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.databindingsample.model.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.Main6Activity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span>            <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/view_include<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">bind:</span>userInfo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{userInfo}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><h4 id="viewStub"><a href="#viewStub" class="headerlink" title="viewStub"></a>viewStub</h4><p>dataBinding 一样支持 ViewStub 布局</p><p>在布局文件中引用 viewStub 布局</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ViewStub</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/view_stub<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/view_stub<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>获取到 ViewStub 对象，由此就可以来控制 ViewStub 的可见性</p><pre class=" language-java"><code class="language-java">ActivityMain6Binding activityMain6Binding <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main6<span class="token punctuation">)</span><span class="token punctuation">;</span>View view <span class="token operator">=</span> activityMain6Binding<span class="token punctuation">.</span>viewStub<span class="token punctuation">.</span><span class="token function">getViewStub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果需要为 ViewStub 绑定变量值，则 ViewStub 文件一样要使用 layout 标签进行布局，主布局文件使用自定义的 bind 命名空间将变量传递给 ViewStub</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ViewStub</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/view_stub<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/view_stub<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">bind:</span>userInfo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{userInfo}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>如果在 xml 中没有使用 <code>bind:userInfo="@{userInf}"</code>对 ViewStub 进行数据绑定，则可以等到当 ViewStub <strong>Inflate</strong> 时再绑定变量，此时需要为 ViewStub 设置 <code>setOnInflateListener</code>回调函数，在回调函数中进行数据绑定</p><pre class=" language-java"><code class="language-java">activityMain6Binding<span class="token punctuation">.</span>viewStub<span class="token punctuation">.</span><span class="token function">setOnInflateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewStub<span class="token punctuation">.</span>OnInflateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onInflate</span><span class="token punctuation">(</span>ViewStub stub<span class="token punctuation">,</span> View inflated<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果在 xml 中没有使用 bind:userInfo="@{userInf}" 对 viewStub 进行数据绑定</span>        <span class="token comment" spellcheck="true">//那么可以在此处进行手动绑定</span>        ViewStubBinding viewStubBinding <span class="token operator">=</span> DataBindingUtil<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>inflated<span class="token punctuation">)</span><span class="token punctuation">;</span>        viewStubBinding<span class="token punctuation">.</span><span class="token function">setUserInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onInflate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="BindingAdapter"><a href="#BindingAdapter" class="headerlink" title="BindingAdapter"></a>BindingAdapter</h2><p>dataBinding 提供了 <strong>BindingAdapter</strong> 这个注解用于支持自定义属性，或者是修改原有属性。注解值可以是已有的 xml 属性，例如 <code>android:src</code>、<code>android:text</code>等，也可以自定义属性然后在 xml 中使用</p><p>例如，对于一个 ImageView ，我们希望在某个变量值发生变化时，可以动态改变显示的图片，此时就可以通过 BindingAdapter 来实现</p><p>需要先定义一个静态方法，为之添加 BindingAdapter 注解，注解值是为 ImageView 控件自定义的属性名，而该静态方法的两个参数可以这样来理解：当 ImageView 控件的 url 属性值发生变化时，dataBinding 就会将 ImageView 实例以及新的 url 值传递给 loadImage() 方法，从而可以在此动态改变 ImageView 的相关属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@BindingAdapter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"url"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>ImageView view<span class="token punctuation">,</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"loadImage url : "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 xml 文件中关联变量值，当中，bind 这个名称可以自定义</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.ixiaow.databindingsample.model.Image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.constraint.ConstraintLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/image<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/ic_launcher_background<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">bind:</span>url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{image.url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.constraint.ConstraintLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><p>BindingAdapter 更为强大的一点是可以覆盖 Android 原先的控件属性。例如，可以设定每一个 Button 的文本都要加上后缀：“-Button”</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@BindingAdapter</span><span class="token punctuation">(</span><span class="token string">"android:text"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span>Button view<span class="token punctuation">,</span> String text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    view<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text <span class="token operator">+</span> <span class="token string">"-Button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{()-<span class="token punctuation">></span>handler.onClick(image)}<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{<span class="token punctuation">"</span>改变图片Url<span class="token punctuation">"</span>}<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span></code></pre><p>这样，整个工程中使用到了 <strong>“android:text”</strong> 这个属性的控件，其显示的文本就会多出一个后缀</p><h2 id="BindingConversion"><a href="#BindingConversion" class="headerlink" title="BindingConversion"></a>BindingConversion</h2><p>dataBinding 还支持对数据进行转换，或者进行类型转换</p><p>与 BindingAdapter 类似，以下方法会将布局文件中所有以<code>@{String}</code>方式引用到的<code>String</code>类型变量加上后缀<code>-conversionString</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@BindingConversion</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">conversionString</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> text <span class="token operator">+</span> <span class="token string">"-conversionString"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>xml 文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{<span class="token punctuation">"</span>xxx<span class="token punctuation">"</span>}<span class="token punctuation">'</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textAllCaps</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>可以看到，对于 Button 来说，BindingAdapter 和 BindingConversion 同时生效了，而 BindingConversion 的优先级要高些, 此外，BindingConversion 也可以用于转换属性值的类型</p><p>看以下布局，此处在向 <code>background</code> 和 <code>textColor</code> 两个属性赋值时，直接就使用了字符串，按正常情况来说这自然是会报错的，但有了 BindingConversion 后就可以自动将字符串类型的值转为需要的 <code>Drawable</code> 和 <code>Color</code> 了</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{<span class="token punctuation">"</span>红色<span class="token punctuation">"</span>}<span class="token punctuation">'</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>红色背景蓝色字<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{<span class="token punctuation">"</span>蓝色<span class="token punctuation">"</span>}<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{<span class="token punctuation">"</span>蓝色<span class="token punctuation">"</span>}<span class="token punctuation">'</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>蓝色背景红色字<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{<span class="token punctuation">"</span>红色<span class="token punctuation">"</span>}<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@BindingConversion</span><span class="token keyword">public</span> <span class="token keyword">static</span> Drawable <span class="token function">convertStringToDrawable</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">"#FF4081"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"蓝色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">"#3F51B5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">"#344567"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@BindingConversion</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">convertStringToColor</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">"#FF4081"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"蓝色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">"#3F51B5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Color<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">"#344567"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Array、List、Set、Map-…"><a href="#Array、List、Set、Map-…" class="headerlink" title="Array、List、Set、Map …"></a>Array、List、Set、Map …</h2><p>dataBinding 也支持在布局文件中使用 <strong>数组、Lsit、Set 和 Map</strong>，且在布局文件中都可以通过 <code>list[index]</code> 的形式来获取元素</p><p>而为了和 <strong>variable</strong> 标签的尖括号区分开，在声明 <strong>Lsit&lt; String &gt;</strong> 之类的数据类型时，需要使用尖括号的转义字符</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Set<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.util.SparseArray<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>List&amp;lt;String<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map&amp;lt;String, String<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Set&amp;lt;String<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sparse<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SparseArray&amp;lt;String<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name">···</span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{array[1]}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name">···</span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{sparse[index]}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name">···</span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{list[index]}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name">···</span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{map[key]}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name">···</span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{map[<span class="token punctuation">"</span>leavesC<span class="token punctuation">"</span>]}<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name">···</span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{set.contains(<span class="token punctuation">"</span>xxx<span class="token punctuation">"</span>)?<span class="token punctuation">"</span>xxx<span class="token punctuation">"</span>:key}<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span></code></pre><h2 id="资源引用"><a href="#资源引用" class="headerlink" title="资源引用"></a>资源引用</h2><p>dataBinding 支持对尺寸和字符串这类资源的访问</p><p><code>dimens.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dimen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paddingBig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>190dp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dimen</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dimen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paddingSmall<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>150dp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dimen</span><span class="token punctuation">></span></span></code></pre><p><code>string.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>%s is %s<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span></code></pre><p><code>layout.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span>       <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span>       <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boolean<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{flag ? @dimen/paddingBig:@dimen/paddingSmall}<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>@{@string/format(<span class="token punctuation">"</span>leavesC<span class="token punctuation">"</span>, <span class="token punctuation">"</span>Ye<span class="token punctuation">"</span>)}<span class="token punctuation">'</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>textAllCaps</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JetPack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataBinding </tag>
            
            <tag> Jetpack </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git切换分支保存修改的代码</title>
      <link href="/posts/6314a567/"/>
      <url>/posts/6314a567/</url>
      
        <content type="html"><![CDATA[<p>在使用git同步代码的过程中，也许会碰到一个项目有好几个分支的情况，就拿我最近的项目来说，我创建了两个分支：<code>master</code>和<code>dev</code>。</p><p>经常是在<code>dev</code>分支上开发好了，然后切换到<code>master</code>分支上进行<code>merge</code>, 但是有时候在<code>dev</code>分支上开发了一半，忽然又需要去<code>master</code>上改个需求或者<code>bug</code>，这时候该当如何呢？</p><a id="more"></a><p>在这个场景下，我查找到了两种方式：</p><h2 id="及时commit代码"><a href="#及时commit代码" class="headerlink" title="及时commit代码"></a>及时<code>commit</code>代码</h2><p>在<code>dev</code>分支上把已经完成的部分<code>commit</code>后，不<code>push</code>，然后切换到<code>master</code>分支，改完后再<code>commit</code></p><h2 id="使用-git-stash"><a href="#使用-git-stash" class="headerlink" title="使用 git stash"></a>使用 <code>git stash</code></h2><p>有时候，在<code>dev</code>分支上写的代码，没有编译通过，就需要切换到<code>master</code>分支， 在这种情况下（代码还没有经过测试通过，还无法<code>commit</code>）可以使用<code>git stash</code>。</p><ul><li><p>保存<code>dev</code>当前的修改</p><p>在命令行输入：</p><pre class=" language-shell"><code class="language-shell">git stash //会生成一个hash值作为版本标志</code></pre><p>或者</p><pre class=" language-shell"><code class="language-shell">git stash save "修改的信息" //会将`修改的信息`作为版本标志</code></pre><p>这样你的代码就回到了上一个<code>commit</code>了。接下来就可以切换到<code>master</code>分支了。</p></li><li><p>返回到<code>dev</code>分支</p><p>当修改完<code>master</code>分支后，可以通过</p><pre class=" language-shell"><code class="language-shell">git stash pop //将栈中的最后一个取出来</code></pre><p>或者</p><pre class=" language-shell"><code class="language-shell">git stash list //可以看到所有的版本信息</code></pre><p>然后选择列表项，执行</p><pre class=" language-shell"><code class="language-shell">git stash apply stash@{0} //git stash apply stash@{0}的作用是可以指定栈中的一个版本</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git压缩提交记录次数</title>
      <link href="/posts/ec91b04f/"/>
      <url>/posts/ec91b04f/</url>
      
        <content type="html"><![CDATA[<p>最近在提交<code>git</code>项目中，又get到一项技能，发现自己提交次数有点多，想来合并以前的一些提交记录，减少提交次数。</p><a id="more"></a><p>命令如下:</p><pre class=" language-shell"><code class="language-shell">git rebase -i HEAD~n  //n代表你要查看的提交记录条数</code></pre><p>例如执行</p><pre class=" language-shell"><code class="language-shell">git rebase -i HEAD~4</code></pre><p>后会出现：</p><pre class=" language-shell"><code class="language-shell">pick d167a86 提交记录1pick c56d2e4 提交记录2pick c56d2e4 提交记录3pick c56d2e4 提交记录4# Rebase 7a28439..c56d2e4 onto 7a28439 (2 commands)## Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like "squash", but discard this commit's log message# x, exec = run command (the rest of the line) using shell# d, drop = remove commit## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.## Note that empty commits are commented out</code></pre><p>可以看到我们提交的4条记录，假如，我需要将记录2、记录3、记录4合并到记录2（只能将最新的合并，即就是 记录1可以合并记录2，但是记录2不能合并记录1），我们将记录3、记录4中的<code>pick</code>改为<code>squash</code>然后保存更改退出后，然后会进入：</p><pre class=" language-shell"><code class="language-shell"># This is a combination of 3 commits.# This is the 1st commit message:提交记录2# This is the commit message #2:提交记录3# This is the commit message #3:提交记录4# Please enter the commit message for your changes. Lines starting# with '#' will be ignored, and an empty message aborts the commit.## Date:      Fri Oct 12 14:58:12 2018 +0800## interactive rebase in progress; onto 7a28439# Last commands done (2 commands done):#    pick d167a86 解决测试中提出的bug,修改etag缓存策略#    squash c56d2e4 解决测试中的bug和修改UI布局,开发新漫画2.6.0版本# No commands remaining.# You are currently rebasing branch 'develope' on '7a28439'.## Changes to be committed:#       modified:   .gitignore#       deleted:    .gradle/.DS_Store#       deleted:    .gradle/2.14.1/.DS_Store#       deleted:    .gradle/2.14.1/taskArtifacts/cache.properties#       deleted:    .gradle/2.14.1/taskArtifacts/cache.properties.lock#       deleted:    .gradle/2.14.1/taskArtifacts/fileHashes.bin#       deleted:    .gradle/2.14.1/taskArtifacts/fileSnapshots.bin#       deleted:    .gradle/2.14.1/taskArtifacts/fileSnapshotsToTreeSnapshotsIndex.bin#       deleted:    .gradle/2.14.1/taskArtifacts/taskArtifacts.bin#       deleted:    .gradle/2.14.1/tasks/_app_compileDebugJavaWithJavac/localClassSetAnalysis/localClassSetAnalysis.bin#       deleted:    .gradle/2.14.1/tasks/_app_compileDebugJavaWithJavac/localClassSetAnalysis/localClassSetAnalysis.lock#       deleted:    .gradle/2.14.1/tasks/_app_compileDebugJavaWithJavac/localJarClasspathSnapshot/localJarClasspathSnapshot.bin#       deleted:    .gradle/2.14.1/tasks/_app_compileDebugJavaWithJavac/localJarClasspathSnapshot/localJarClasspathSnapshot.lock</code></pre><p>我们删除上面的”提交记录3、提交记录4”后，保存退出，然后执行：</p><pre class=" language-shell"><code class="language-shell">git rebase --continue</code></pre><p>执行完毕后会显示<code>successful</code>信息。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git修改历史提交信息（包含作者信息）</title>
      <link href="/posts/6314a567/"/>
      <url>/posts/6314a567/</url>
      
        <content type="html"><![CDATA[<p>最近学到了 git 的一招对我来说的新技巧：<strong>修改历史提交的 author</strong>。</p><p>在某天打开码云，查看项目时，发现贡献者好几个，我就纳闷了我一个人写的代码怎么会有好几个贡献者，最后通过<code>git log</code>查看提交信息发现，确实是在提交的过程中用了好几个用户名，于是就百度了一下git命令，最后让我找到了<code>git rebase</code>。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>使用 <code>git rebase -i HEAD~n</code> 命令，<code>n</code>表示要修改前 n 次所有的提交， 说白了就是你要查看多少条提交记录。比如，我要查看从现在到<code>30</code>条范围内的提交记录，所以可以使用 <code>git rebase -i HEAD~30</code>。<code>-i</code>中的 i 是 interactive，交互的意思。</p><p>输入此命令后，显示以下结果：</p><pre class=" language-shell"><code class="language-shell">pick ac0fcc6 add file2pick a0cbfbe add file3pick 16ee6eb add file4# Rebase d57f11f..16ee6eb onto d57f11f (3 command(s))## Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like "squash", but discard this commit's log message# x, exec = run command (the rest of the line) using shell</code></pre><p>通过列表找到，需要要修改的提交信息，根据提示，如，上面的例子中，我需要修改第二行和第三行的提交信息，那我们就可以将第二行和第三行的 pick 改成 edit 或 e，保存退出。</p><p>保存上面的修改并退出后，git 会依次执行上面的操作，当操作为 pick 时，直接 commit。当操作为 edit 时，会中断，并提示以下信息：</p><pre class=" language-shell"><code class="language-shell">You can amend the commit now, with    git commit --amend Once you are satisfied with your changes, run    git rebase --continue</code></pre><p>这里的意思是说，你可以使用 <code>git commit --amend</code> 来修改此次提交，修改以后，觉得满意了，执行 <code>git rebase --continue</code> 继续剩下的流程。</p><p>由于我们的主要目的是修改提交者的信息，因此光用 <code>git commit --amend</code> 是不够的，我们要使用 <code>git commit --amend --author  "xw &lt;aa.hbl@gmail.com&gt;"</code> 这样的操作，这一点是修改提交者信息的关键所在。</p><p>使用上面的命令成功修改此次提交的提交者信息后，一定要记得执行 <code>git rebase --continue</code> 继续。</p><p>最终完成以后提示如下：</p><pre class=" language-shell"><code class="language-shell">$ git rebase --continueSuccessfully rebased and updated refs/heads/master.</code></pre><p><strong>注意</strong>: 在本次操作中用到了<code>git</code>命令行和<code>vim</code>编辑模式，不明白的话就自行百度吧。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
